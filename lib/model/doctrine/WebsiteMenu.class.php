<?php

/**
 * WebsiteMenu
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class WebsiteMenu extends BaseWebsiteMenu
{
    public function __toString()
    {
        return $this->getTitle();
    }

    /**
     * Function to Listing website menu
     *
     * @param integer $snWebId
     */
    public function websiteMenuListing($snWebId)
    {
        if(!is_numeric($snWebId))
        return false;

        $RecordData = Doctrine_Query::create()
        ->select("wm.*")
        ->from('WebsiteMenu wm')
        ->where("wm.WebsiteId = ?", $snWebId)
        ->andWhere("wm.ParentId = ?", 0)
        ->andWhere("wm.MenuType = ?", sfConfig::get("app_MenuType_Header"))
        ->orderBy("wm.Ordering");
        return $RecordData;
    }

    /**
     * Function to check unique title at edit time
     * Function to use at view time
     *
     * @param integer $snId
     */
    public function websitemenuView($snId)
    {
        if(!is_numeric($snId))
        return false;

        $RecordData = Doctrine_Query::create()
        ->select("wm.*,wCms.*,wu.*")
        ->from('WebsiteMenu wm')
        ->leftJoin("wm.WebsiteMenuCMSPages wCms")
        ->leftJoin("wm.WebsiteMenuUsersWebsite wu")
        ->where("wm.Id = ?", $snId)
        ->fetchArray();

        return $RecordData;
    }

    /*check that title is already exist or not */
    /**
     * Function to check title exist or not
     *
     * @param integer $snWebId
     * @param string $ssTitle
     */
    public function checkUniqueTitle($snWebId, $ssTitle)
    {
        if(!is_numeric($snWebId) || !is_string($ssTitle))
        return false;

        $asResult = Doctrine_Query::create()
        ->select("wm.*")
        ->from('WebsiteMenu wm')
        ->where("wm.WebsiteId = ?", $snWebId)
        ->andWhere("wm.Title = ?", $ssTitle)
        ->andWhere("wm.MenuType = ?", sfConfig::get("app_MenuType_Header"))
        ->fetchArray();

        return $asResult;
    }

    /*delete record recursive meance chiled record also*/
    /**
     * Function to delete recursive record
     *
     * @param integer $snId
     */
    public function deleteWebsiteMenu($snId)
    {
        if(!is_numeric($snId))
        return false;

        Doctrine_Query::create()
        ->delete('WebsiteMenu wm')
        ->where("wm.ParentId =?",$snId)
        ->orWhere('wm.id = ?', $snId)
        ->execute();

        return true;
    }

    /**
     * Function to get All Parent title
     *
     */
    public function getParentTitle()
    {
        $asResult =Doctrine_Query::create()
        ->select("wm.Title")
        ->from('WebsiteMenu wm')
        ->fetchArray();

        return $asResult;
    }

    /**
     * Function to check FAQ Contect Exist or not
     *
     * @param integer $snWebId
     * @param integer $type
     */
    public function checkFAQContactExist($snWebId,$type)
    {
        $asResult = Doctrine_Query::create()
        ->select("wm.*")
        ->from('WebsiteMenu wm')
        ->where("wm.WebsiteId = ?", $snWebId)
        ->andWhere("wm.Type = ?",$type )
        ->fetchArray();
        return $asResult;
    }

    /**
     * Function to get parent chiled record 
     *
     * @param integer $snWebId
     * @param integer $snId
     */
    public function parentChild($snWebId, $snId)
    {
        if(!is_numeric($snWebId) || !is_numeric($snId))
        return false;

        $asResult = Doctrine_Query::create()
        ->select("wm.Id")
        ->from('WebsiteMenu wm')
        ->where("wm.WebsiteId = ?", $snWebId)
        ->andWhere("wm.ParentId = ?", $snId)
        ->andWhere("wm.MenuType = ?", sfConfig::get("app_MenuType_Header"))
        ->fetchArray();
        return $asResult;
    }

    /**
     * Function to set Ordring
     *
     * @param integer $order
     * @param integer $id
     */
    public function setMenuOrdring($order,$id)
    {
		if(!is_numeric($order) || !is_numeric($id))
			return false;
		
		Doctrine_Query::create()
			  ->update('WebsiteMenu')
			  ->set('Ordering', '?', $order)
			  ->where('id = ?', $id)
			  ->execute();
    }
    
    /**
     * Function to set Ordring at delete time
     *
     * @param integer $webId
     * @param integer $orderNumber
     * @param integer $parentId
     */
    public function updateOrdrAtMenuDelete($webId,$orderNumber, $parentId)
	{
	  if(!is_numeric($webId) || !is_numeric($orderNumber) || !is_numeric($parentId))
		 return false;
		  
	  $sql = Doctrine_Query::create()
			  ->update('WebsiteMenu w')
			  ->set('w.Ordering',  ('w.Ordering -1 '))
			  ->where('w.WebsiteId = ?', $webId)
			  ->andWhere('w.Ordering > ?',$orderNumber)
			  ->andWhere("w.ParentId = ?", $parentId)
			  ->andWhere("w.MenuType = ?", sfConfig::get("app_MenuType_Header"))
			  ->execute();

		return true;
	}
	
	/**
     * Function to get Max Order at add/edit time
     *
     * @param integer $webId
     * @param integer $orderNumber
     */
	public function maxOrder($WebsiteId, $parentId)
	{
	  if(!is_numeric($WebsiteId) || !is_numeric($parentId))
			return false;
			
		$maxOrder =	Doctrine_Query::create()
					  ->select("MAX(w.Ordering)")
					  ->from('WebsiteMenu w')
					  ->where('w.WebsiteId = ?', $WebsiteId)
					  ->andWhere("w.ParentId = ?", $parentId)
					  ->andWhere("w.MenuType = ?", sfConfig::get("app_MenuType_Header"))
					  ->fetchArray();

		return $maxOrder[0]["MAX"];
	}
	
	/**
     * Function to set Ordring at delete time of footer menu
     *
     * @param integer $webId
     * @param integer $orderNumber
     */
    public function updateOrdrAtFooterDelete($webId,$orderNumber)
	{
	  if(!is_numeric($webId) || !is_numeric($orderNumber))
		 return false;
		  
	  $sql = Doctrine_Query::create()
			  ->update('WebsiteMenu w')
			  ->set('w.Ordering',  ('w.Ordering -1 '))
			  ->where('w.WebsiteId = ?', $webId)
			  ->andWhere('w.Ordering > ?',$orderNumber)
			  ->andWhere("w.MenuType = ?", sfConfig::get("app_MenuType_Footer"))
			  ->execute();

		return true;
	}
	
	/**
     * This function is for delete website data
     *
     * @param  integer $websiteId
     * @auther jaydip dodiya
     * @return boolean
     */
	public function deleteWebsiteMenuData($websiteId)
	{
		if(!is_numeric($websiteId))
			return false;

		Doctrine_Query::create()
		->delete('WebsiteMenu W')
		->where('W.WebsiteId = ?', $websiteId)
		->execute();

		return true;
	}
}