<?php

/**
 * PracticeAreasTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PracticeAreasTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PracticeAreasTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PracticeAreas');
    }

    /**
     * Enter description here...
     *
     * @return unknown
     */
    public static function getPracticeAreaList()
    {
        #THIS QUERY IS GET THE DATA OF PARENT ONLY.
        $sql = Doctrine_Query::create()
        ->select('pa.Id, pa.ParentId, pa.Name')
        ->from('PracticeAreas pa')
        ->where('pa.ParentId = ?',0)
        ->andwhere('pa.Name != ?',"All Categories")
        ->andWhere('pa.Status = ?',sfConfig::get('app_Status_Active'))
        ->orderBy('pa.Name ASC');
        $arrSectors = $sql->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        //clsCommon::pr($arrSectors,1);
        if(!empty($arrSectors)) {

            /*$arrTreeSectors = array(
            -1 => array('label'=>'Parent Category','children'=>array()),
            );
            $arrTreeSectors[-1]['children'][1] = array('label'=>'One');
            $arrTreeSectors[-1]['children'][2] = array('label'=>'two');



            $arrTreeSectors[-1]['children'][1]['children'][3] = array('label'=>'three');
            $arrTreeSectors[-1]['children'][1]['children'][4] = array('label'=>'four');*/


            $arrTreeSectors = array(
            -1 => array('label'=>'All Category','children'=>array()),
            );
            for ($i = 0;$i<count($arrSectors);$i++){
                if (isset($arrSectors[$i]['ParentId'])) {
                    # HERE WE ARE ASSING THE VALUE IN ARRAY.
                    $level0 = $arrSectors[$i]['Id']."-0"; # here we define level 0 with value.

                    if (!isset($arrTreeSectors[-1]['children'][$level0]['label'])) {
                        $arrTreeSectors[-1]['children'][$level0]['label'] = $arrSectors[$i]['Name'];
                    }
                    if (!isset($arrTreeSectors[-1]['children'][$level0]['children'])) {
                        $arrTreeSectors[-1]['children'][$level0]['children'] = array();
                    }
                    #THIS QUERY IS USE TO GET THE CHILD ON THE BASIS OF ABOVE PARENT ID.
                    $sql2 = Doctrine_Query::create()
                    ->select('pa.Id, pa.ParentId, pa.Name')
                    ->from('PracticeAreas pa')
                    ->where('pa.ParentId = ?',$arrSectors[$i]['Id'])
                    ->andWhere('pa.Status = ?',sfConfig::get('app_Status_Active'))
                    ->orderBy('pa.Name ASC');
                    $arrChildList = $sql2->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
                    if (!empty($arrChildList)) {
                        for ($j =0;$j<count($arrChildList);$j++){
                            if (isset($arrChildList[$j]['ParentId'])) {
                                # HERE WE ARE ASSING THE CHILD VALUE IN ARRAY.
                                $level1 = $arrChildList[$j]['Id']."-1"; # here we define level 1 with value

                                if (!isset($arrTreeSectors[-1]['children'][$level1]['label'])) {
                                    $arrTreeSectors[-1]['children'][$level0]['children'][$level1]['label'] = $arrChildList[$j]['Name'];
                                }
                                if (!isset($arrTreeSectors[-1]['children'][$level1]['children'])) {
                                    $arrTreeSectors[-1]['children'][$level0]['children'][$level1]['children'] = array();
                                }

                                #THIS QUERY IS USE TO GET THE SUB-CHILD ON THE ABOVE BASIS OF PARENT ID.
                                $sql3 = Doctrine_Query::create()
                                ->select('pa.Id, pa.ParentId, pa.Name')
                                ->from('PracticeAreas pa')
                                ->where('pa.ParentId = ?',$arrChildList[$j]['Id'])
                                ->andWhere('pa.Status = ?',sfConfig::get('app_Status_Active'))
                                ->orderBy('pa.Name ASC');
                                $arrSubChildList = $sql3->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

                                if (!empty($arrSubChildList)) {
                                    for ($p=0;$p<count($arrSubChildList);$p++){
                                        if (isset($arrSubChildList[$p]['ParentId'])) {
                                            # HERE WE ARE ASSING THE SUB-CHILD VALUE IN ARRAY.
                                            $level2 = $arrSubChildList[$p]['Id']."-2"; #Here we define level 2 with value
                                            if (!isset($arrTreeSectors[-1]['children'][$level0]['children'][$level1]['children'][$level2]['label'])) {
                                                $arrTreeSectors[-1]['children'][$level0]['children'][$level1]['children'][$level2]['label'] = $arrSubChildList[$p]['Name'];
                                            }
                                            if (!isset($arrTreeSectors[-1]['children'][$level2]['children'])) {
                                                $arrTreeSectors[-1]['children'][$level0]['children'][$level1]['children'][$level2]['children'] = array();
                                            }

                                        }else {
                                            $arrTreeSectors[-1]['children'][$arrSubChildList[$p]['ParentId']]['children'][$level0]['children'][$level1]['children'][$level2] = array('label'=>$arrSubChildList[$p]['Name']);
                                        }

                                    }
                                }
                            }else {
                                $arrTreeSectors[-1]['children'][$arrChildList[$j]['ParentId']]['children'][$level0]['children'][$level1] = array('label'=>$arrChildList[$j]['Name']);
                            }

                        }
                    }
                }else {
                    $arrTreeSectors[-1]['children'][$arrSectors[$i]['ParentId']]['children'][$level0] = array('label'=>$arrSectors[$i]['Name']);
                }
                //clsCommon::pr($arrTreeSectors,1);
            }

            //clsCommon::pr($arrTreeSectors);
            return $arrTreeSectors;
        } else {
            return false;
        }
    }

    /**
     * THIS FUNCATION IS USE FOR HIRARCHY IN DROPDOWN LIST.
     *
     * @return array()
     */
    public static function getPracticeAreaParentList()
    {
        $sql = Doctrine_Query::create()
        ->from('PracticeAreas pa')
        ->where('pa.ParentId = ?',0)
        ->andWhere('pa.Status = ?',sfConfig::get('app_Status_Active'))
        ->andwhere('pa.Name != ?',"All Categories")
        ->orderBy('pa.Name ASC');
        $arrList = $sql->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        $arrListReturn = array();
        for ($i = 0; $i<count($arrList); $i++)
        {
            $arrListReturn[$arrList[$i]['Id']."-0"] = $arrList[$i]['Name'];
            $sql2 = Doctrine_Query::create()
            ->from('PracticeAreas pa')
            ->where('pa.ParentId = ?',$arrList[$i]['Id'])
            ->andWhere('pa.Status = ?',sfConfig::get('app_Status_Active'))
            ->orderBy('pa.Name ASC');
            $arrChildList = $sql2->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
            if (!empty($arrChildList)) {
                for ($j = 0; $j<count($arrChildList); $j++){
                    $arrListReturn[$arrChildList[$j]['Id']."-1"] = "&nbsp;-".$arrChildList[$j]['Name'];
                    $sql3 = Doctrine_Query::create()
                    ->from('PracticeAreas pa')
                    ->where('pa.ParentId = ?',$arrChildList[$j]['Id'])
                    ->andWhere('pa.Status = ?',sfConfig::get('app_Status_Active'))
                    ->orderBy('pa.Name ASC');
                    $arrSubChildList = $sql3->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
                    if (!empty($arrSubChildList)) {
                        for ($p=0;$p<count($arrSubChildList);$p++){
                            $arrListReturn[$arrSubChildList[$p]['Id']."-2"] = "&nbsp;&nbsp;&nbsp;-".$arrSubChildList[$p]['Name'];
                        }
                    }
                }
            }
        }
        //clsCommon::pr($arrListReturn);
        return $arrListReturn;
    }

    /**
     * THIS FUNCTION IS USE FOR CHANGE THE STATUS OF PARENT CHILD AS WELL AS SUB-CHILD TOO.
     * THIS IS RECURSIVE FUNCTION. 
     * FUNCTION CALL ITSELF IF IT IS PARENT CATEGORY.
     *
     * @param unknown_type $id
     * @param unknown_type $status
     */
    public static function changeChildStatus($id,$status)
    {
        $sql = Doctrine_Query::create()
        ->from('PracticeAreas pa')
        ->where('pa.ParentId = ?',$id);
        $arrList = $sql->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        if (count($arrList)>0) {
            $sql = Doctrine_Query::create()
            ->update('PracticeAreas PA')
            ->set('PA.Status',"'$status'")
            ->where('PA.ParentId = ?',$id)
            ->execute();
            PracticeAreasTable::changeChildStatus($arrList[0]['Id'],$status);
        }else {
            $sql2 = Doctrine_Query::create()
            ->update('PracticeAreas PA')
            ->set('PA.Status',"'$status'")
            ->where('PA.ParentId = ?',$id)
            ->execute();
        }
    }

    /**
     * THIS FUNCTION IS USE FOR DELETE THE PARENT CHILD AS WELL AS SUB-CHILD TOO.
     * THIS IS RECURSIVE FUNCTION. 
     * FUNCTION CALL ITSELF IF IT IS PARENT CATEGORY.
     *
     * @param unknown_type $id
     */
    public static function deletedChildSubchild($id)
    {
        $sql = Doctrine_Query::create()
        ->from('PracticeAreas pa')
        ->where('pa.ParentId = ?',$id);
        $arrList = $sql->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        if (count($arrList)>0) {
            # THIS IS USE FOR DELETE THE DATA FROM THE USER PRACTICE AREA FIRST THEN
            # DELETE THE DATA FROM PRACTICE AREA.
            $del3 = Doctrine_Query::create()
            ->delete()
            ->from('UserPracticeArea upa')
            ->where('upa.PracticeAreaId = ?',$id)
            ->execute();

            $del = Doctrine_Query::create()
            ->delete()
            ->from('PracticeAreas pa')
            ->where('pa.Id = ?',$id)
            ->execute();
            PracticeAreasTable::deletedChildSubchild($arrList[0]['Id']);
        }else {
            # THIS IS USE FOR DELETE THE DATA FROM THE USER PRACTICE AREA FIRST THEN
            # DELETE THE DATA FROM PRACTICE AREA.
            $del4 = Doctrine_Query::create()
            ->delete()
            ->from('UserPracticeArea upa')
            ->where('upa.PracticeAreaId = ?',$id)
            ->execute();

            $del2 = Doctrine_Query::create()
            ->delete()
            ->from('PracticeAreas pa')
            ->where('pa.Id = ?',$id)
            ->execute();
        }
    }

    /**
     * This Function is use for check the email id is unique or not
     *
     * @param unknown_type $id
     * @param unknown_type $newEmail
     * @return flage variable i.e. true or flase
     */
    public static function nameCheck($id,$newName)
    {
        $dbName = Doctrine_Query::create()
        ->select('pa.Name')
        ->from('PracticeAreas pa')
        ->where('pa.Id != ?',$id)
        ->andWhere('pa.Name = ?',$newName);
        //echo $dbEmail->getSqlQuery();die;
        $resultName = $dbName->fetchArray();
        $dbName->free();
        //echo count($resultEmail);die;
        if (count($resultName) == 1) {
            return true;
        }else {
            return false;
        }
        //return $resultEmail[0]['Email'];
    }

    /**
     * THIS FUNCTION IS USE TO LISTING AT THE INDEX PAGE.
     * THIS FUNCATION CREATE ONE ARRAY AND IN THAT ONE ANOTHER ARRAY OF 
     * ID,NAME,PARENTID,DESCRIPTION,STATUS,CREATE DATE TIME,UPDATE DATE TIME,LEVEL
     *
     * @return ARRAY()
     */
    public static function getPracticeAreaListing()
    {
        $sql = Doctrine_Query::create()
        ->from('PracticeAreas pa')
        ->where('pa.ParentId = ?',0)
        ->andWhereIn('pa.Status',array(sfConfig::get('app_Status_Active'),sfConfig::get('app_Status_Inactive')))
        ->andwhere('pa.Name != ?',"All Categories")
        ->orderBy('pa.Name ASC');
        $arrList = $sql->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        $arrListReturn = array();
        for ($i = 0; $i<count($arrList); $i++)
        {
            $arrListReturn[$arrList[$i]['Id']] = array('Id'=>$arrList[$i]['Id'],'Name'=>$arrList[$i]['Name'],'ParentId'=>$arrList[$i]['ParentId'],'Description'=>$arrList[$i]['Description'],'Status'=>$arrList[$i]['Status'],'UpdateDateTime'=>$arrList[$i]['UpdateDateTime'],'CreateDateTime'=>$arrList[$i]['CreateDateTime'],'level'=>0);
            $sql2 = Doctrine_Query::create()
            ->from('PracticeAreas pa')
            ->where('pa.ParentId = ?',$arrList[$i]['Id'])
            ->andWhereIn('pa.Status',array(sfConfig::get('app_Status_Active'),sfConfig::get('app_Status_Inactive')))
            ->orderBy('pa.Name ASC');
            $arrChildList = $sql2->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
            if (!empty($arrChildList)) {
                for ($j = 0; $j<count($arrChildList); $j++){
                    $arrListReturn[$arrChildList[$j]['Id']] = array('Id'=>$arrChildList[$j]['Id'],'Name'=>$arrChildList[$j]['Name'],'ParentId'=>$arrChildList[$j]['ParentId'],'Description'=>$arrChildList[$j]['Description'],'Status'=>$arrChildList[$j]['Status'],'UpdateDateTime'=>$arrChildList[$j]['UpdateDateTime'],'CreateDateTime'=>$arrChildList[$j]['CreateDateTime'],'level'=>1);
                    $sql3 = Doctrine_Query::create()
                    ->from('PracticeAreas pa')
                    ->where('pa.ParentId = ?',$arrChildList[$j]['Id'])
                    ->andWhereIn('pa.Status',array(sfConfig::get('app_Status_Active'),sfConfig::get('app_Status_Inactive')))
                    ->orderBy('pa.Name ASC');
                    $arrSubChildList = $sql3->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
                    if (!empty($arrSubChildList)) {
                        for ($p=0;$p<count($arrSubChildList);$p++){
                            $arrListReturn[$arrSubChildList[$p]['Id']] = array('Id'=>$arrSubChildList[$p]['Id'],'Name'=>$arrSubChildList[$p]['Name'],'ParentId'=>$arrSubChildList[$p]['ParentId'],'Description'=>$arrSubChildList[$p]['Description'],'Status'=>$arrSubChildList[$p]['Status'],'UpdateDateTime'=>$arrSubChildList[$p]['UpdateDateTime'],'CreateDateTime'=>$arrSubChildList[$p]['CreateDateTime'],'level'=>2);
                        }
                    }
                }
            }
        }
        //clsCommon::pr($arrListReturn);
        return $arrListReturn;
    }

    /**
     * THIS FUNCTION IS USE FOR GETTING THE NAME OF THE PARENT IN LISTING
     * OF MANAGE PRACTICE AREA.
     *
     * @param unknown_type $parentId
     * @return unknown
     */
    public static function getParentName($parentId)
    {
        $sql = Doctrine_Query::create()
        ->select('pa.Name')
        ->from('PracticeAreas pa')
        ->where('pa.Id = ?',$parentId);
        $arrSql = $sql->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
        return $arrSql[0]['Name'];
    }

    /**
     * THIS FUNCTION IS USE TO GET THE UPPER LEVEL PARENT NAME
     *
     * @param unknown_type $id
     * @return NAME OR NULL
     */
    public static function getParentUpperName($id)
    {
        $sql = Doctrine_Query::create()
        ->from('PracticeAreas pa')
        ->where('pa.Id = ?',$id);
        $arrSql = $sql->execute(array(),Doctrine_Core::HYDRATE_ARRAY );
        if (!empty($arrSql)) {
            $sql2 = Doctrine_Query::create()
            ->from('PracticeAreas pa')
            ->where('pa.Id = ?',$arrSql[0]['ParentId']);
            $arrSql2 = $sql2->execute(array(),Doctrine_Core::HYDRATE_ARRAY );
            if (!empty($arrSql2)) {
                return $arrSql2[0]['Name'];
                break;
            }else{
                return false;
                break;
            }
        }
    }


    public static function getPracticeAreaCat(){

        $sql = Doctrine_Query::create()
        ->select('p.Name')
        ->from('PracticeAreas p')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->andWhere('p.parentId = ? ', '0' )
        ->andWhere('p.Id <> ? ', '-1' )
        ->orderBy('p.Name ASC');

        $result = $sql->fetchArray();
        //echo '<pre>';print_r($result); exit;
        $catCombo = array();
        foreach ($result as $value ){
            $catCombo[$value['Id']] = $value['Name'];
        }
        //clsCommon::pr($stateCombo);exit;
        $sql->free();
        return $catCombo;
    }

    public static function getPracticeAreaSubCat($id){


        $sql = Doctrine_Query::create()
        ->select('p.Name')
        ->from('PracticeAreas p')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active') )
        ->andWhere('p.parentId = ? ', $id )
        ->andWhere('p.Id <> ? ', '-1' )
        ->orderBy('p.Name ASC');

        $result = $sql->fetchArray();
        $subCatCombo = array();

        foreach ($result as $value ){
            $subCatCombo[$value['Id']] = $value['Name'];
        }

        //clsCommon::pr($catCombo);exit;
        //echo '<pre>';print_r($subCatCombo); exit;
        $sql->free();
        return $subCatCombo;

    }

    public static function getPracticeAreaSubICat($id){


        $sql = Doctrine_Query::create()
        ->select('p.Name')
        ->from('PracticeAreas p')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active') )
        ->andWhere('p.parentId = ? ', $id )
        ->andWhere('p.Id <> ? ', '-1' )
        ->orderBy('p.Name ASC');

        $result = $sql->fetchArray();
        $subICatCombo = array();

        foreach ($result as $value ){
            $subICatCombo[$value['Id']] = $value['Name'];
        }
        //echo '<pre>';print_r($subICatCombo); exit;
        $sql->free();
        return $subICatCombo;

    }

    public static function getPracticeAreaCategories($parentId = ''){

        $sql = Doctrine_Query::create()
        //->select('p.Name')
        ->from('PracticeAreas p')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->andWhere('p.Id <> ? ', '-1' )
        ->orderBy('p.Name ASC');
        if(!empty($parentId)) {
            $sql->andWhere('p.parentId = ? ', $parentId );
        } else {
            $sql->andWhere('p.parentId = ? ', '0' );
        }

        $result = $sql->fetchArray();
        /*$catCombo = array();
        foreach ($result as $value ){
        $catCombo[$value['Id']] = $value['Name'];
        }*/
        #clsCommon::pr($result);
        $sql->free();
        return $result;
    }

    public static function getPracticeAreas() {

        $practiceAreasArr = Doctrine_Query::create()
        ->select('pa.Id, pa.Name')
        ->from('PracticeAreas pa')
        ->where('pa.Id != ?', '-1')
        ->andWhere('pa.Status = ?','Active')
        ->fetchArray();

        $resultArr = array();

        foreach($practiceAreasArr as $key => $val){
            $resultArr[$val['Id']] = $val['Name'];
        } // End of For Each
        #$practiceAreasArr->free();
        return $resultArr;
    } // End of Function


    /**
     * Function to Get Practice Area Which are used Maximum to Lower, For LG Browser By Practice Area
     *
     * @return unknown
     */
    public static function getMaxUsedParcticeArea(){

        $practiceAreasArr = Doctrine_Query::create()
        ->select('pa.Id, pa.Name, pa.ParentId, pa.slug, upa.PracticeAreaId as PareaId, count(upa.PracticeAreaId) as PCount, upa.Level as PLevel, upa.CatId as CatId, upa.SubCatId as SubCatId, upa.ChildId as ChildId')
        ->from('PracticeAreas pa')
        ->leftJoin('pa.PracticeAreasUserPracticeArea upa')
        ->where('pa.Id != ?', '-1')
        ->andWhere('pa.Status = ?','Active')
        ->groupBy('upa.PracticeAreaId')
        ->orderBy('PCount DESC, pa.Name ASC');


        /*if(clsCommon::checkStateCookieExist()){
        #echo clsCommon::checkStateCookieValue();
        $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers u');
        $practiceAreasArr->leftJoin('u.UsersUserProfile up');
        $practiceAreasArr->andWhere('up.StateId = ? ', clsCommon::checkStateCookieValue() );
        }*/

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers pau');
            $practiceAreasArr->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $practiceAreasArr->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers pau');
            $practiceAreasArr->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $practiceAreasArr->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }


        $resultArr = array();
        $resultArr = $practiceAreasArr->fetchArray();
        #clsCommon::pr($resultArr);
        $practiceAreasArr->free();
        return $resultArr;
        /*
        SELECT upa.PracticeAreaId, count( upa.PracticeAreaId ) AS PCount
        FROM `UserPracticeArea` AS upa
        WHERE upa.PracticeAreaId != '-1'
        GROUP BY upa.PracticeAreaId
        ORDER BY PCount DESC
        */

    } // End of Function

    /**
     * Functon to Get All Paractice Areas in Key Value Arr 
     *
     * @return unknown
     */
    public static function getPracticeAreasKeyVal() {
        $practiceAreasArr = Doctrine_Query::create()
        ->select('pa.Id, pa.Name')
        ->from('PracticeAreas pa')
        ->andWhere('pa.Status = ?','Active')
        ->orderBy('pa.Name ASC');
        $result = $practiceAreasArr->fetchArray();
        $practiceAreasArr->free();
        $arr = array();
        foreach ($result as $key => $val) {
            $arr[$val['Id']] = $val['Name'];
        } // End of Foreach
        return $arr;

    } // End of function

    /**
     * Function to Get Practice Area with Parent id = 0 and who has max used
     * @return unknown
     */
    public static function getMaxUsedParentParcticeArea(){

        $practiceAreasArr = Doctrine_Query::create()
        ->select('upa.Id, upa.CatId as PCatId, count(upa.CatId ) as PCount, pa.Name as PName, pa.slug as PSlug')
        ->from('UserPracticeArea upa')
        ->leftJoin('upa.UserPracticeAreaCat pa')
        ->where('pa.Id != ?', '-1')
        ->andWhere('pa.Status = ?','Active')
        ->andWhere('pa.ParentId = ?',0)
        ->groupBy('upa.CatId')
        ->orderBy('PCount DESC, pa.Name ASC');
        #echo $practiceAreasArr->getSqlQuery();

        /*if(clsCommon::checkStateCookieExist()){ // IF State Cookie is set
        #echo clsCommon::checkStateCookieValue();
        $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers u');
        $practiceAreasArr->leftJoin('u.UsersUserProfile up');
        $practiceAreasArr->andWhere('up.StateId = ? ', clsCommon::checkStateCookieValue() );
        }*/

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers pau');
            $practiceAreasArr->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $practiceAreasArr->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers pau');
            $practiceAreasArr->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $practiceAreasArr->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }

        $resultArr = array();
        $resultArr = $practiceAreasArr->fetchArray();
        #clsCommon::pr($resultArr);
        $practiceAreasArr->free();
        return $resultArr;
        /*
        SELECT upa.PracticeAreaId, count( upa.PracticeAreaId ) AS PCount
        FROM `UserPracticeArea` AS upa
        WHERE upa.PracticeAreaId != '-1'
        GROUP BY upa.PracticeAreaId
        ORDER BY PCount DESC
        */

    } // End of Function

    /**
     * Function to Get Practice Area of Passed Parent Cat Id  whose Sub Cat is Maximunm Used
     * @return unknown
     */
    public static function getMaxUsedSubParcticeArea($parentId){

        $practiceAreasArr = Doctrine_Query::create()
        ->select('upa.Id, upa.SubCatId as PSubCatId, count(upa.SubCatId ) as PCount, pa.Name as PName, pa.slug as PSlug')
        ->from('UserPracticeArea upa')
        ->leftJoin('upa.UserPracticeAreaSubCat pa')
        ->where('pa.Status = ?','Active')
        ->andWhere('upa.CatId = ?',$parentId)
        ->groupBy('upa.SubCatId')
        ->orderBy('PCount DESC, pa.Name ASC');
        #echo $practiceAreasArr->getSqlQuery();

        /*if(clsCommon::checkStateCookieExist()){ // IF State Cookie is set
        #echo clsCommon::checkStateCookieValue();
        $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers u');
        $practiceAreasArr->leftJoin('u.UsersUserProfile up');
        $practiceAreasArr->andWhere('up.StateId = ? ', clsCommon::checkStateCookieValue() );
        }*/

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers pau');
            $practiceAreasArr->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $practiceAreasArr->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers pau');
            $practiceAreasArr->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $practiceAreasArr->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }

        $resultArr = array();
        $resultArr = $practiceAreasArr->fetchArray();
        #clsCommon::pr($resultArr);
        $practiceAreasArr->free();
        return $resultArr;

    } // End of Function

    /**
     * Function to Get Practice Area of Passed Parent Cat Id  whose Sub Cat is Maximunm Used
     * @return unknown
     */
    public static function getMaxUsedChildParcticeArea($subId){

        $practiceAreasArr = Doctrine_Query::create()
        ->select('upa.Id, upa.ChildId as PChildId, count(upa.ChildId ) as PCount, pa.Name as PName, pa.slug as PSlug')
        ->from('UserPracticeArea upa')
        ->leftJoin('upa.UserPracticeAreaChild pa')
        ->where('pa.Status = ?','Active')
        ->andWhere('upa.SubCatId = ?',$subId)
        ->groupBy('upa.ChildId')
        ->orderBy('PCount DESC, pa.Name ASC');
        #echo $practiceAreasArr->getSqlQuery();

        /*if(clsCommon::checkStateCookieExist()){ // IF State Cookie is set
            #echo clsCommon::checkStateCookieValue();
            $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers u');
            $practiceAreasArr->leftJoin('u.UsersUserProfile up');
            $practiceAreasArr->andWhere('up.StateId = ? ', clsCommon::checkStateCookieValue() );
        }*/

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers pau');
            $practiceAreasArr->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $practiceAreasArr->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            $practiceAreasArr->leftJoin('upa.UserPracticeAreaUsers pau');
            $practiceAreasArr->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $practiceAreasArr->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }


        $resultArr = array();
        $resultArr = $practiceAreasArr->fetchArray();
        #clsCommon::pr($resultArr);
        $practiceAreasArr->free();
        return $resultArr;

    } // End of Function

    /* Below Functions were made for the routing changes*/

    /**
     * Function to Get Cat If based on Slug
     *
     * @return unknown
     */
    public static function getCatIdBasedOnSlug(){

        $sql = Doctrine_Query::create()
        ->select('p.Id,p.Name,p.slug')
        ->from('PracticeAreas p')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->andWhere('p.Id <> ? ', '-1' )
        ->orderBy('p.Name ASC');

        $result = $sql->fetchArray();
        #echo '<pre>';print_r($result); exit;
        $catCombo = array();
        foreach ($result as $value ){
            $catCombo[$value['slug']] = $value['Id'];
        }
        $catCombo[0] = 0;
        #clsCommon::pr($catCombo);
        $sql->free();
        return $catCombo;
    } // End of Function


    /**
     * Function to generate Parent Category Dropdown with its Slug => Name 
     *
     * @return unknown
     */
    /*public static function getPracticeAreaCatWithSlug(){

    $sql = Doctrine_Query::create()
    ->select('p.Id,p.Name,p.slug')
    ->from('PracticeAreas p')
    ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active'))
    ->andWhere('p.parentId = ? ', '0' )
    ->andWhere('p.Id <> ? ', '-1' )
    ->orderBy('p.Name ASC');

    $result = $sql->fetchArray();
    echo '<pre>';print_r($result); exit;
    $catCombo = array();
    foreach ($result as $value ){
    $catCombo[$value['slug']] = $value['Name'];
    }
    #clsCommon::pr($catCombo);exit;
    $sql->free();
    return $catCombo;
    } */// End of Function

    /**
     * Function to generate Parent Category Dropdown which is used only, with its Slug => Name 
     *
     * @return unknown
     */
    public static function getPracticeAreaCatWithSlug(){

        $sql = Doctrine_Query::create()
        ->select('p.Id,p.Name,p.slug')
        ->from('PracticeAreas p')
        ->leftJoin('p.PracticeAreasUserPracticeAreaCat pc')
        ->leftJoin('pc.UserPracticeAreaUsers pau')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->andWhere('p.parentId = ? ', '0' )
        ->andWhere('p.Id <> ? ', '-1' )
        //->andWhere('pc.Level = ? ', 0 ) // Commented For Issue 434
        ->andWhere('pau.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->orderBy('p.Name ASC');

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            #$sql->leftJoin('pc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            #$sql->leftJoin('pc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }

        #echo $sql->getSqlQuery();
        $result = $sql->fetchArray();
        #echo '<pre>';print_r($result); exit;
        $catCombo = array();
        foreach ($result as $value ){
            $catCombo[$value['slug']] = $value['Name'];
        }
        #clsCommon::pr($catCombo);exit;
        $sql->free();
        return $catCombo;
    } // End of Function

    public static function getPracticeAreaSubCatWithSlug($id){

        $allCat = self::getCatIdBasedOnSlug();  // Get All Cat with Slug

        $sql = Doctrine_Query::create()
        ->select('p.*')
        ->from('PracticeAreas p')
        ->leftJoin('p.PracticeAreasUserPracticeAreaSubCat psc')
        ->leftJoin('psc.UserPracticeAreaUsers pau')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active') )
        ->andWhere('p.parentId = ? ', $allCat[$id] )
        ->andWhere('p.Id <> ? ', '-1' )
     //   ->andWhere('psc.Level = ? ', 1 )
        ->andWhere('pau.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->orderBy('p.Name ASC');

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            #$sql->leftJoin('psc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            #$sql->leftJoin('psc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }


        $result = $sql->fetchArray();
        $subCatCombo = array();

        foreach ($result as $value ){
            $subCatCombo[$value['slug']] = $value['Name'];
        }

        //clsCommon::pr($catCombo);exit;
        //echo '<pre>';print_r($subCatCombo); exit;
        $sql->free();
        return $subCatCombo;

    } // End of Function

    public static function getPracticeAreaSubICatWithSlug($id){
        $allCat = self::getCatIdBasedOnSlug();  // Get All Cat with Slug

        $sql = Doctrine_Query::create()
        ->select('p.*')
        ->from('PracticeAreas p')
        ->leftJoin('p.PracticeAreasUserPracticeAreaChild pc')
        ->leftJoin('pc.UserPracticeAreaUsers pau')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active') )
        ->andWhere('p.parentId = ? ', $allCat[$id])
        ->andWhere('p.Id <> ? ', '-1' )
        ->andWhere('pc.Level = ? ', 2 )
        ->andWhere('pau.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->orderBy('p.Name ASC');

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            #$sql->leftJoin('pc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            #$sql->leftJoin('pc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }

        $result = $sql->fetchArray();
        $subICatCombo = array();

        foreach ($result as $value ){
            $subICatCombo[$value['slug']] = $value['Name'];
        }
        //echo '<pre>';print_r($subICatCombo); exit;
        $sql->free();
        return $subICatCombo;

    }

    /**
     * Function to Get Practice Areas with Slug as key and Name as value
     *
     * @param unknown_type $parentId
     * @return unknown
     */
    public static function getPracticeAreaCategoriesWithSlug($parentId = ''){

        $sql = Doctrine_Query::create()
        //->select('p.Name')
        ->from('PracticeAreas p')
        ->leftJoin('p.PracticeAreasUserPracticeAreaCat pc')
        ->leftJoin('pc.UserPracticeAreaUsers pau')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->andWhere('p.Id <> ? ', '-1' )
        //->andWhere('pc.Level = ? ', 0 ) // Commented for Issue 434
        ->andWhere('pau.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->orderBy('p.Name ASC');
        if(!empty($parentId)) {
            $sql->andWhere('p.parentId = ? ', $parentId );
        } else {
            $sql->andWhere('p.parentId = ? ', '0' );
        }

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            #$sql->leftJoin('pc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            #$sql->leftJoin('pc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }

        $result = $sql->fetchArray();
        /*$catCombo = array();
        foreach ($result as $value ){
        $catCombo[$value['Id']] = $value['Name'];
        }*/
        #clsCommon::pr($result);
        $sql->free();
        return $result;
    }

    /**
     * Function to Get Sub Practice Areas with Slug as key and Name as value
     *
     * @param unknown_type $parentId
     * @return unknown
     */
    public static function getSubPracticeAreaCategoriesWithSlug($parentId = ''){

        $sql = Doctrine_Query::create()
        //->select('p.Name')
        ->from('PracticeAreas p')
        ->leftJoin('p.PracticeAreasUserPracticeAreaSubCat psc')
        ->leftJoin('psc.UserPracticeAreaUsers pau')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->andWhere('p.Id <> ? ', '-1' )
       // ->andWhere('psc.Level = ? ', 1 )
        ->andWhere('pau.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->orderBy('p.Name ASC');
        if(!empty($parentId)) {
            $sql->andWhere('p.parentId = ? ', $parentId );
        } else {
            $sql->andWhere('p.parentId = ? ', '0' );
        }

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
           # $sql->leftJoin('psc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
           # $sql->leftJoin('psc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }

        $result = $sql->fetchArray();
        /*$catCombo = array();
        foreach ($result as $value ){
        $catCombo[$value['Id']] = $value['Name'];
        }*/
        #clsCommon::pr($result);
        $sql->free();
        return $result;
    } // End of Function

    /**
     * Function to Get Sub Practice Areas with Slug as key and Name as value
     *
     * @param unknown_type $parentId
     * @return unknown
     */
    public static function getChildPracticeAreaCategoriesWithSlug($parentId = ''){

        $sql = Doctrine_Query::create()
        //->select('p.Name')
        ->from('PracticeAreas p')
        ->leftJoin('p.PracticeAreasUserPracticeAreaChild pc')
        ->leftJoin('pc.UserPracticeAreaUsers pau')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->andWhere('p.Id <> ? ', '-1' )
        ->andWhere('pc.Level = ? ', 2 )
        ->andWhere('pau.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->orderBy('p.Name ASC');
        if(!empty($parentId)) {
            $sql->andWhere('p.parentId = ? ', $parentId );
        } else {
            $sql->andWhere('p.parentId = ? ', '0' );
        }

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            #$sql->leftJoin('pc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            #$sql->leftJoin('pc.UserPracticeAreaUsers pau');
            $sql->leftJoin('pau.UsersUserPracticeAreaLocation uupal');
            $sql->andWhere('uupal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }

        $result = $sql->fetchArray();
        /*$catCombo = array();
        foreach ($result as $value ){
        $catCombo[$value['Id']] = $value['Name'];
        }*/
        #clsCommon::pr($result);
        $sql->free();
        return $result;
    }


    /**
     * Function to Get Slug  based on Id 
     *
     * @return unknown
     */
    public static function getSlug(){

        $sql = Doctrine_Query::create()
        ->select('p.Id,p.Name,p.slug')
        ->from('PracticeAreas p')
        ->where('p.Status = ? ', sfConfig::get('app_UserStatus_Active'))
        ->andWhere('p.Id <> ? ', '-1' )
        ->orderBy('p.Name ASC');

        $result = $sql->fetchArray();
        #echo '<pre>';print_r($result); exit;
        $catCombo = array();
        foreach ($result as $value ){
            $catCombo[$value['Id']] = $value['slug'];
        }
        $catCombo[0] = 0;
        #clsCommon::pr($catCombo);
        $sql->free();
        return $catCombo;
    } // End of Function


}