<?php

/**
 * WebsiteXFAQs
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class WebsiteXFAQs extends BaseWebsiteXFAQs
{
    /* this function is made for update the status of WebsiteXFAQs table */
    public function updateStatusCounceledge($snId,$ssStatus)
    {
        if(!is_numeric($snId) || !is_string($ssStatus))
        return false;

        Doctrine_Query::create()
        ->update('WebsiteXFAQs')
        ->set('status', '?', $ssStatus)
        ->where('id = ?', $snId)
        ->execute();
    }

    /* this function is made for insert data in table */
    public function saveCounceledgeLigaltrip($faqId,$webId,$ordering,$status)
    {
        $obj = new WebsiteXFAQs();
        $obj->setFAQId($faqId);
        $obj->setWebsiteId($webId);
        $obj->setOrdering($ordering);
        $obj->setStatus($status);
        $obj->save();

    }

    /*this function is made for when you uncheck the checkbox it delete from table */
    public function AjaxDelete($faqId,$WebsiteId)
    {
        if(!is_numeric($faqId) || !is_numeric($WebsiteId))
        return false;

        Doctrine_Query::create()
        ->delete('WebsiteXFAQs w')
        ->where('w.FAQId = ?', $faqId)
        ->andWhere('w.WebsiteId = ?', $WebsiteId)
        ->execute();
        return true;
    }

    /*this function is check that this record is inside the table or no */
    public function CheckBoxCheckUncheck($faqId, $WebsiteId)
    {
        $RecordData = Doctrine_Query::create()
        ->select("w.*")
        ->from('WebsiteXFAQs w')
        ->where('w.FAQId = ?', $faqId)
        ->andWhere('w.WebsiteId = ?', $WebsiteId)
        ->fetchArray();

        if(count($RecordData) > 0)
        return true;
        else
        return false;

    }

    /*this function is made when you change status from global it change status in WebsiteXFAQs*/
    public function GlobalStatusChange($snId, $ssStatus)
    {
        if(!is_numeric($snId) || !is_string($ssStatus))
        return false;

        Doctrine_Query::create()
        ->update('WebsiteXFAQs')
        ->set('status', '?', $ssStatus)
        ->where('FAQId = ?', $snId)
        ->execute();
    }

    /* this function is made for updating the order of WebsiteXFAQss*/
    public function updateOrdering($snId,$snOrder)
    {
        if(!is_numeric($snId) || !is_numeric($snOrder))
        return false;

        Doctrine_Query::create()
        ->update('WebsiteXFAQs')
        ->set('Ordering', '?', $snOrder)
        ->where('id = ?', $snId)
        ->execute();
    }

    public function maxOrder($WebsiteId)
    {
        if(!is_numeric($WebsiteId))
        return false;

        $maxOrder =	Doctrine_Query::create()
        ->select("MAX(w.Ordering)")
        ->from('WebsiteXFAQs w')
        ->where('w.WebsiteId = ?', $WebsiteId)
        ->fetchArray();

        return $maxOrder[0]["MAX"];
    }

    public function updateOrdrAtDelete($webId,$orderNumber)
    {
        if(!is_numeric($webId) || !is_numeric($orderNumber))
        return false;

        $sql = Doctrine_Query::create()
        ->update('WebsiteXFAQs w')
        ->set('w.Ordering',  ('w.Ordering -1 '))
        ->where('w.WebsiteId = ?', $webId)
        ->andWhere('w.Ordering > ?',$orderNumber)
        ->execute();

        return true;
    }

    public function getWebsiteIdGloble($snId)
    {
        if(!is_numeric($snId))
        return false;

        $websiteIdData = Doctrine_Query::create()
        ->select('w.WebsiteId,w.Ordering')
        ->from('WebsiteXFAQs w')
        ->where('w.FAQId = ?',$snId)
        ->fetchArray();

        return $websiteIdData;
    }

    public function deleteWithGlobal($faqId)
    {
        if(!is_numeric($faqId))
        return false;

        Doctrine_Query::create()
        ->delete('WebsiteXFAQs w')
        ->where('w.FAQId = ?', $faqId)
        ->execute();

        return true;
    }

    public function getIdsList($WebsiteId)
    {
        if(!is_numeric($WebsiteId))
        return false;

        $RecordData = Doctrine_Query::create()
        ->select("w.FAQId")
        ->from('WebsiteXFAQs w')
        ->where('w.WebsiteId = ?', $WebsiteId)
        ->fetchArray();
        return $RecordData;

    }

    public function deletePersonalWebsiteId($id)
    {
        if(!is_numeric($id))
        return false;

        Doctrine_Query::create()
        ->delete('WebsiteXFAQs w')
        ->where('w.id = ?', $id)
        ->execute();

        return true;
    }

    public function viewPersonalWeb($snId)
    {
        if(!is_numeric($snId))
        return false;

        $asResult = Doctrine_Query::create()
        ->select('w.*,wf.*,wfu.*')
        ->from('WebsiteXFAQs w')
        ->leftJoin("w.WebsiteXFAQsFAQs wf")
        ->leftJoin("w.WebsiteXFAQsUsersWebsite wfu")
        ->where('w.id = ?', $snId)
        ->fetchArray();

        return $asResult;
    }

    public function personalWebsiteListing()
    {
        $RecordData = Doctrine_Query::create()
        ->select("w.*,wf.*")
        ->from('WebsiteXFAQs w')
        ->leftjoin("w.WebsiteXFAQsFAQs wf")
        ->whereNotIn('w.WebsiteId', array(0,1,2));

        return $RecordData;
    }
    
    
    /**
     * This function is for delete website data
     *
     * @param  integer $websiteId
     * @auther jaydip dodiya
     * @return boolean
     */
	public function deleteFAQsWebsiteData($websiteId)
	{
		if(!is_numeric($websiteId))
			return false;

		Doctrine_Query::create()
		->delete('WebsiteXFAQs W')
		->where('W.WebsiteId = ?', $websiteId)
		->execute();

		return true;
	}
	
}