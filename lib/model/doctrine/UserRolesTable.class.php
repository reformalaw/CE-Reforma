<?php

/**
 * UserRolesTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserRolesTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object UserRolesTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('UserRoles');
    }

    /**
     * THIS FUNCTION IS USE TO DELETE OLD ROLE FROM THE USERROLES TABLE
     * AND NEW ENTRY WILL INSERTED THEN AFTER THAT PROCESS.
     *
     * @param unknown_type $id
     */
    public static function deleteOldUserRoles($id)
    {
        $del = Doctrine_Query::create()
        ->delete()
        ->from('UserRoles ur')
        ->where('ur.UserId = ?',$id)
        ->execute();
    }

    public static function getRolesList($id)
    {
        $sql = Doctrine_Query::create()
        ->from('UserRoles ur')
        ->where('ur.UserId = ?',$id);
        $arrList = $sql->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
        $arrRolesList = array();
        if (count($arrList)>0) {
            foreach ($arrList as $arrPer){
                $arrRolesList[] = $arrPer['RoleId'];
            }
        }
        return $arrRolesList;
    }

    /**
     * THIS FUNCTION IS USE FOR DISPLAY THE ROLE IN INDEX PAGE.
     *
     * @param unknown_type $id
     * @return ARRAY()
     */
    public static function getRolesRecordForIndexPage($id)
    {
        $sql = Doctrine_Query::create()
        ->from('UserRoles ur')
        ->where('ur.UserId = ?',$id);
        $arrList = $sql->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
        //clsCommon::pr($arrList,1);
        $arrPerList = array();
        if (!empty($arrList)) {
            for ($i=0;$i<count($arrList);$i++)
            {
                $sql2 = Doctrine_Query::create()
                ->from('Roles ro')
                ->where('ro.Id = ?',$arrList[$i]['RoleId'])
                ->andWhere('ro.Status = ?',sfConfig::get('app_Status_Active'))
                ->orderBy('ro.Name ASC');
                $arrListing = $sql2->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
                //clsCommon::pr($arrListing);
                if (!empty($arrListing)) {
                    for ($p=0;$p<count($arrListing);$p++)
                    {
                        $arrPerList[] = $arrListing[$p]['Name'];
                    }
                }
            }
        }
        return $arrPerList;
    }

    /**
     * THIS FUNCTION IS USE FOR DISPLAY THE ROLE AND PERMISSION AT VIEW PAGE.
     *
     * @param unknown_type $id
     * @return ARRAY()
     */
    public static function getRolesRecordForViewPage($id)
    {
        $sql = Doctrine_Query::create()
        ->from('UserRoles ur')
        ->where('ur.UserId = ?',$id);
        $arrList = $sql->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
        //clsCommon::pr($arrList,1);
        $arrPerList = array();
        if (!empty($arrList)) {
            for ($i=0;$i<count($arrList);$i++)
            {
                $sql2 = Doctrine_Query::create()
                ->from('Roles ro')
                ->where('ro.Id = ?',$arrList[$i]['RoleId'])
                ->andWhere('ro.Status = ?',sfConfig::get('app_Status_Active'))
                ->orderBy('ro.Name ASC');
                $arrListing = $sql2->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
                //clsCommon::pr($arrListing);
                if (!empty($arrListing)) {
                    for ($p=0;$p<count($arrListing);$p++)
                    {
                        $arrPerList[] = "<b>".$arrListing[$p]['Name']."</b>";
                        $sql3 = Doctrine_Query::create()
                        ->from('RolesXPermission rxp')
                        ->where('rxp.RoleId = ?',$arrListing[$p]['Id']);
                        $arrRoleIdList = $sql3->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
                        //clsCommon::pr($arrRoleIdList);
                        if (!empty($arrRoleIdList)) {
                            for ($q=0;$q<count($arrRoleIdList);$q++)
                            {
                                $sql4 = Doctrine_Query::create()
                                ->from('Permissions pr')
                                ->where('pr.Id = ?',$arrRoleIdList[$q]['PermissionId']);
                                $arrPerListing = $sql4->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
                                //clsCommon::pr($arrPerListing);
                                if (!empty($arrPerListing)) {
                                    for ($o=0;$o<count($arrPerListing);$o++)
                                    {
                                        $arrPerList[$arrPerListing[$o]['Id']] = " - ".$arrPerListing[$o]['UniqueKey'];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return $arrPerList;
    }

    /**
     * THIS FUNCTION IS USE TO CREATE ONE ARRAY OF PERMISSION.
     * FOR THE CHECKING THE LOGIN USER PERMISSION.
     *
     * @param unknown_type $id
     * @return ARRAY()
     */
    public static function getPermissionListUsingRole($id)
    {
        $sql = Doctrine_Query::create()
        ->from('UserRoles ur')
        ->where('ur.UserId = ?',$id)
        ->orderBy('ur.Id ASC');
        $arrURList = $sql->execute(array(),Doctrine_Core::HYDRATE_ARRAY );
        //clsCommon::pr($arrURList);
        $arrReturn = array();
        if (!empty($arrURList)) {
            for ($i=0;$i<count($arrURList);$i++)
            {
                $sql2 = Doctrine_Query::create()
                ->from('RolesXPermission rxp')
                ->where('rxp.RoleId = ?',$arrURList[$i]['RoleId'])
                ->orderBy('rxp.Id ASC');
                $arrRXPList = $sql2->execute(array(),Doctrine_Core::HYDRATE_ARRAY );
                //clsCommon::pr($arrRXPList);
                if (!empty($arrRXPList)) {
                    for ($j=0;$j<count($arrRXPList);$j++)
                    {
                        $sql3 = Doctrine_Query::create()
                        ->from('Permissions pr')
                        ->where('pr.Id = ?',$arrRXPList[$j]['PermissionId'])
                        ->orderBy('pr.Id ASC');
                        $arrPerList = $sql3->execute(array(),Doctrine_Core::HYDRATE_ARRAY );
                        //clsCommon::pr($arrPerList);
                        if (!empty($arrPerList)) {
                        	$arrReturn[$arrPerList[0]['Id']] = $arrPerList[0]['Name'];
                        }
                    }
                }
            }
        }
        return $arrReturn;
    }
}