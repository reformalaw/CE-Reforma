<?php

/**
 * UsersTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UsersTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object UsersTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Users');
    }

    /**
    * This function get user details by username
    * @param unknown_type $username
    * @return mixed
    */
    public static function getUserDetailsByEmail($username)
    {
        $queryUser = Doctrine_Query::create()
        ->from('Users u')
        ->where('u.Email = ?',$username);
        //clsCommon::pr($queryUser->getSqlQuery(),1);
        $result = $queryUser->fetchOne();
        //clsCommon::pr($result,1);
        return $result;
    }

    /**
     * This Function is use for check the email id is unique or not
     *
     * @param unknown_type $id
     * @param unknown_type $newEmail
     * @return flage variable i.e. true or flase
     */
    public static function emailCheck($id,$newEmail)
    {
        $dbEmail = Doctrine_Query::create()
        ->select('u.Email')
        ->from('Users u')
        ->where('u.id != ?',$id)
        ->andWhere('u.Email = ?',$newEmail);
        //echo $dbEmail->getSqlQuery();die;
        $resultEmail = $dbEmail->fetchArray();
        $dbEmail->free();
        //echo count($resultEmail);die;
        if (count($resultEmail) == 1) {
            return true;
        }else {
            return false;
        }
        //return $resultEmail[0]['Email'];
    }

    /**
     * this function is use for checking the username
     *
     * @param unknown_type $id
     * @param unknown_type $newUname
     * @return unknown
     */
    public static function userNameCheck($id,$newUname)
    {
        $dbUname = Doctrine_Query::create()
        ->select('u.Username')
        ->from('Users u')
        ->where('u.id != ?',$id)
        ->andWhere('u.Username = ?',$newUname);
        //echo $dbEmail->getSqlQuery();die;
        $resultUname = $dbUname->fetchArray();
        $dbUname->free();
        //echo count($resultUname);die;
        if (count($resultUname) == 1) {
            return true;
        }else {
            return false;
        }
        //return $resultEmail[0]['Email'];
    }

    /**
     * This function returns all the Customers / Professional/ Attorney Users .
     *
     * @return unknown
     */
    public static function getCustomers()
    {

        $queryUser = Doctrine_Query::create()
        ->select('u.FirstName, u.LastName')
        ->from('Users u')
        ->where('u.BillingSubscription = ?',"Yes")
        ->andWhere('u.UserType = ?', sfConfig::get('app_UserType_Customer') )
        ->andWhereIn('u.Status ', array(sfConfig::get('app_UserStatus_Active'), sfConfig::get('app_UserStatus_Inactive')))
        ->orderBy('u.FirstName ASC')  ;

        $result = $queryUser->fetchArray();
        $queryUser->free();
        $custArr = array();

        if(!empty($result)) {
            for($i=0; $i<count($result); $i++) {
                $custArr[$result[$i]['Id']]  = $result[$i]['FirstName'].' '.$result[$i]['LastName'];
            }
        }

        return $custArr;

    } // End of Function

    /**
     * THIS FUNCTION IS USE FOR GET THE PRACTICE AREA LIST WITH USER.
     *
     * @param unknown_type $Id
     * @return unknown
     */
    public static function getUserWithPA($Id){
        $queryUser = Doctrine_Query::create()
        ->select('u.*,GROUP_CONCAT(upa.PracticeAreaId) as admin_users_customers_Network')
        ->from('Users u')
        ->leftJoin('u.UsersUserPracticeArea upa')
        ->where('u.Id = ?',$Id);
        $result = $queryUser->fetchOne();
        return $result;
    }
    /**
     *  THIS FUNCTION IS USE FOR UPDATE THE DATA OF CUSTOMERS.
     *
     * @param unknown_type $objUser
     * @param unknown_type $id
     */
    public static function updateUserData($objUser,$id){

        $FirstName = $objUser['FirstName'];
        $LastName  = $objUser['LastName'];
        $Email     = $objUser['Email'];
        //$Username = $objUser['Username'];
        $Address1 = $objUser['Address1'];
        $Address2 = $objUser['Address2'];
        $City     = $objUser['City'];
        $State    = $objUser['StateId'];
        $Phone    =$objUser['Phone'];
       
        $Zip      = $objUser['Zip'];

        if (isset($objUser['NetworkProfileSubscription']) && $objUser['NetworkProfileSubscription'] == "on")
        {
            if(array_key_exists("PriorityListing", $objUser))
            $PriorityListing = $objUser["PriorityListing"];
            else
            $PriorityListing = "No";
        }
        else
        {
            $PriorityListing = "No";
        }

        if (isset($objUser['BillingSubscription']) && $objUser['BillingSubscription'] == "on") {
            $BillingSubscription = 'Yes';
        }else { $BillingSubscription = 'No';}
        if (isset($objUser['WebsiteSubscriotion']) && $objUser['WebsiteSubscriotion'] == "on") {
            $WebsiteSubscriotion = 'Yes';
        }else { $WebsiteSubscriotion = 'No';}
        if (isset($objUser['NetworkProfileSubscription']) && $objUser['NetworkProfileSubscription'] == "on") {
            $NetworkProfileSubscription = 'Yes';
        }else { $NetworkProfileSubscription = 'No';}
        $sql = Doctrine_Query::create()
        ->update('Users u')
        ->set('u.FirstName',"'$FirstName'")
        ->set('u.LastName',"'$LastName'")
        ->set('u.Email',"'$Email'")
        // ->set('u.Username',"'$Username'")
        ->set('u.Address1',"'$Address1'")
        ->set('u.Address2',"'$Address2'")
        ->set('u.City',"'$City'")
        ->set('u.Phone', '?' , $Phone)
        ->set('u.Zip', $Zip)
        ->set('u.StateId',"'$State'")
        ->set('u.BillingSubscription',"'$BillingSubscription'")
        ->set('u.WebsiteSubscriotion',"'$WebsiteSubscriotion'")
        ->set('u.NetworkProfileSubscription',"'$NetworkProfileSubscription'")
        ->set('u.PriorityListing',"'$PriorityListing'")
        ->where('u.Id = ?',$id)
        ->execute();
    }

    /**
     * THIS FUNCTION IS USE TO CHECK THE UNIQUE NAME OF DATABASE.
     *
     * @param unknown_type $id
     * @param unknown_type $newEmail
     * @return BOOLEAN
     */
    /*public static function emailCheck($id,$newEmail)
    {
    $dbEmail = Doctrine_Query::create()
    ->select('u.Username')
    ->from('Users u')
    ->where('u.id != ?',$id)
    ->andWhere('u.Username = ?',$newEmail);
    $resultEmail = $dbEmail->fetchArray();
    $dbEmail->free();
    if (count($resultEmail) == 1) {
    return true;
    }else {
    return false;
    }
    }*/

    /**
    * This function get user details by Id
    * @param unknown_type $userId
    * @return mixed
    */
    public static function getUserDetailById($userId)
    {
        $queryUser = Doctrine_Query::create()
        ->from('Users u')
        ->where('u.Id = ?',$userId);
        $result = $queryUser->fetchOne();
        //clsCommon::pr($result,1);
        return $result;
    }

    /**
     * THIS FUNCTION IS USE FOR TO STORE THE LAST LOGIN DATE
     * AT THE TIME OF LOGIN
     *
     * @param unknown_type $id
     */
    public static function updateLastLoginDate($id)
    {
        $checkDate = Doctrine_Query::create()
        ->select('u.LastLoginDateTime')
        ->from('Users u')
        ->where('u.Id = ?',$id)
        ->fetchArray();
        if (!empty($checkDate[0]['LastLoginDateTime']) && isset($checkDate[0]['LastLoginDateTime'])) {
            sfContext::getInstance()->getUser()->setAttribute('last_login',$checkDate[0]['LastLoginDateTime']);
            $date = date('Y-m-d h:i:s');
            $update = Doctrine_Query::create()
            ->update('Users u')
            ->set('u.LastLoginDateTime',"'$date'")
            ->where('u.Id = ?',$id)
            ->execute();
        }else {
            $date = date('Y-m-d h:i:s');
            sfContext::getInstance()->getUser()->setAttribute('last_login',$date);
            $update = Doctrine_Query::create()
            ->update('Users u')
            ->set('u.LastLoginDateTime',"'$date'")
            ->where('u.Id = ?',$id)
            ->execute();
        }
    }

    /**
     * this function is use for check the user name exist or not
     *
     * @param unknown_type $uname
     * @return unknown
     */
    public static function userNameExist($uname){
        $dbUname = Doctrine_Query::create()
        ->from('Users u')
        ->where('u.Username = ?',$uname);
        $resultUname = $dbUname->fetchArray();
        $dbUname->free();
        //echo count($resultUrl);die;
        if (count($resultUname) == 1) {
            return true;
        }else {
            return false;
        }
    }

    public static function allEmailId()
    {
        $queryUser = Doctrine_Query::create()
        ->select("u.Email")
        ->from('Users u')
        ->fetchArray();

        return $queryUser;
    }

    /**
     * This function returns all the Customers / Professional/ Attorney Users .
     *
     * @return unknown
     */
    public static function getCustomersForFinanceReport()
    {

        $queryUser = Doctrine_Query::create()
        ->select('u.FirstName, u.LastName')
        ->from('Users u')
        ->where('u.BillingSubscription = ?',"Yes")
        ->andWhere('u.UserType = ?', sfConfig::get('app_UserType_Customer') )
        ->andWhereIN('u.Status ', array(sfConfig::get('app_UserStatus_Active'),sfConfig::get('app_UserStatus_Inactive')))
        ->orderBy('u.FirstName ASC')  ;

        $result = $queryUser->fetchArray();
        $queryUser->free();
        $custArr = array();

        if(!empty($result)) {
            for($i=0; $i<count($result); $i++) {
                $custArr[$result[$i]['Id']]  = $result[$i]['FirstName'].' '.$result[$i]['LastName'];
            }
        }

        return $custArr;

    } // End of Function

    public static function setUserActivationCode($userId, $activationCode){

        //COMMENT : UPDATE USER ACTIVATION CODE
        Doctrine_Query::create()->update('Users')
        ->set('ActivationCode',"'".$activationCode."'")
        ->where('Id = ? ',$userId)
        ->execute();
        return true;
    }

    /**
     * Function to Get no of Users(Attorneys) which provides Free Consultation
     *
     */
    public static function getFreeConsultUserCount(){
        $qSearch = Doctrine_Query::create();
        $qSearch->from('Users u');
        $qSearch->leftJoin('u.UsersUserProfile up');
        $qSearch->where('u.UserType = ? ', sfConfig::get('app_UserType_Customer'));
        $qSearch->andWhere('u.Status = ? ', sfConfig::get('app_UserStatus_Active') );
        $qSearch->andWhere('u.NetworkProfileSubscription = ? ', 'Yes' );
        $qSearch->andWhere('up.FreeConsultation = ? ', 'Yes' );
        $count = $qSearch->count();
        $qSearch->free();
        return $count;
    } // End of Function

    /**
     * Function to get Users Practice Areas
     *
     */
    public static function getUserPracticeArea($userId){
        $qSearch = Doctrine_Query::create();
        $qSearch->select('upa.Id, pa.Id as practiceareaid, pa.Name as practiceareaname');
        $qSearch->from('UserPracticeArea upa');
        $qSearch->leftJoin('upa.UserPracticeAreaPracticeAreas pa');
        $qSearch->where('upa.PracticeAreaId != ? ','-1');
        $qSearch->andWhere('upa.UserId = ? ',$userId);
        $qSearch->andWhere('pa.Status = ? ',sfConfig::get('app_UserStatus_Active'));
        $qSearch->orderBy('upa.Level DESC, pa.Name ASC');
        #echo $qSearch->getSqlQuery();
        $result = $qSearch->fetchArray();
        $qSearch->free();
        return $result;
    } // End of Function

    public static function getPracticeAreaUserwise($userId) {
        $qSearch = Doctrine_Query::create();
        $qSearch->select('upa.*, pa.Id as practiceid, pa.Name as practicename');
        $qSearch->from('UserPracticeArea upa');
        $qSearch->leftJoin('upa.UserPracticeAreaPracticeAreas pa');
        $qSearch->where('upa.PracticeAreaId != ? ','-1');
        $qSearch->andWhere('upa.UserId = ? ',$userId);
        $qSearch->andWhere('pa.Status = ? ',sfConfig::get('app_UserStatus_Active'));
        $qSearch->orderBy('pa.Name ASC');
        #$qSearch->getSqlQuery();
        $userPracticeAreas = array();
        $userPracticeAreas = $qSearch->fetchArray();
        #clsCommon::pr($userPracticeAreas,1);
        $qSearch->free();
        return $userPracticeAreas;


    }

    /**
     * Function to check whether Customer with Passed ID exist or not
     *
     * @param unknown_type $customerId
     * @return unknown
     */
    public static function checkCustomerExist($customerId){
        $qSearch = Doctrine_Query::create();
        $qSearch->from('Users u');
        $qSearch->where('u.UserType = ? ', sfConfig::get('app_UserType_Customer'));
        $qSearch->andWhere('u.Id = ? ', $customerId);
        $qSearch->andWhereIn('u.Status ', array(sfConfig::get('app_UserStatus_Active'), sfConfig::get('app_UserStatus_Inactive')) );

        $count = $qSearch->count();
        $userData = array();
        $userData = $qSearch->fetchArray();
        $qSearch->free();
        return array('count' => $count, 'userData' => isset($userData[0]) ? $userData[0] : 0 );

    } // End of Function

    /**
     * Function to Get Top 5 Attorneys whose rating is maximum
     *
     * @return Array of Top Professionals
     */
    public static function getTopProfessionals() {

        $qSearch = Doctrine_Query::create();
        $qSearch->from('Users u');
        $qSearch->leftJoin('u.UsersUserProfile up');
        $qSearch->leftJoin('up.UserProfileStates ups');
        $qSearch->where('u.UserType = ? ', sfConfig::get('app_UserType_Customer'));
        $qSearch->andWhere('u.Status = ? ', sfConfig::get('app_UserStatus_Active') );
        $qSearch->andWhere('u.NetworkProfileSubscription  = ? ', 'Yes' );
        $qSearch->andWhere('u.AvgRating != ? ', '0' );
        $qSearch->orderBy('u.AvgRating DESC, RAND()' );
        $qSearch->limit(5);

        /*if(clsCommon::checkStateCookieExist()){
        $qSearch->andWhere('up.StateId = ? ', clsCommon::checkStateCookieValue() );
        }*/

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            $qSearch->leftJoin('u.UsersUserPracticeAreaLocation upal');
            $qSearch->andWhere('upal.StateId = ? ', clsCommon::checkStateCookieValue() );
            $qSearch->andWhere('upal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            $qSearch->leftJoin('u.UsersUserPracticeAreaLocation upal');
            $qSearch->andWhere('upal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }

        #echo $qSearch->getSqlQuery();
        $result = array();
        $result = $qSearch->fetchArray();
        #clsCommon::pr($result, 1);
        $qSearch->free();
        return $result ;
    } // End of Function

    /**
     * Function to Get Featured Attorneys
     *
     * @return Array of Top Professionals
     */
    public static function getFeaturedAttorneys() {

        $sql = Doctrine_Query::create();
        $sql->from('Users u');
        $sql->where('u.UserType = ? ', sfConfig::get('app_UserType_Customer'));
        $sql->andWhere('u.Status = ? ', sfConfig::get('app_UserStatus_Active') );
        $sql->andWhere('u.NetworkProfileSubscription  = ? ', 'Yes' );
        $sql->andWhere('u.IsFeatured = ? ', 'Yes' );
        $sql->orderBy('RAND()' );
        $sql->limit(4);

        /*if(clsCommon::checkStateCookieExist()){
        $sql->leftJoin('u.UsersUserProfile up');
        $sql->andWhere('up.StateId = ? ', clsCommon::checkStateCookieValue() );
        } */

        if(clsCommon::checkStateCookieExist() && clsCommon::checkCountyCookieExist()){
            $sql->leftJoin('u.UsersUserPracticeAreaLocation upal');
            $sql->andWhere('upal.StateId = ? ', clsCommon::checkStateCookieValue() );
            $sql->andWhere('upal.CountyId = ? ', clsCommon::checkCountyCookieValue() );
        } else if(clsCommon::checkStateCookieExist())  {
            $sql->leftJoin('u.UsersUserPracticeAreaLocation upal');
            $sql->andWhere('upal.StateId = ? ', clsCommon::checkStateCookieValue() );
        }


        #echo $sql->getSqlQuery();
        $result = array();
        $result = $sql->fetchArray();
        #clsCommon::pr($result, 1);
        $sql->free();
        return $result ;
    } // End of Function
}