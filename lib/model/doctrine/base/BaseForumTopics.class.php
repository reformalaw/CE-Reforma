<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ForumTopics', 'doctrine');

/**
 * BaseForumTopics
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property integer $UserId
 * @property integer $ForumId
 * @property integer $LastRepliedId
 * @property integer $LastRepliedBy
 * @property integer $TotalViews
 * @property string $Topic
 * @property string $Description
 * @property integer $TotalReplies
 * @property enum $Status
 * @property timestamp $LastRepliedDateTime
 * @property Users $ForumTopicsUsers
 * @property Forums $ForumTopicsForums
 * @property Doctrine_Collection $ForumTopicsForumReply
 * 
 * @method integer             getId()                    Returns the current record's "Id" value
 * @method integer             getUserId()                Returns the current record's "UserId" value
 * @method integer             getForumId()               Returns the current record's "ForumId" value
 * @method integer             getLastRepliedId()         Returns the current record's "LastRepliedId" value
 * @method integer             getLastRepliedBy()         Returns the current record's "LastRepliedBy" value
 * @method integer             getTotalViews()            Returns the current record's "TotalViews" value
 * @method string              getTopic()                 Returns the current record's "Topic" value
 * @method string              getDescription()           Returns the current record's "Description" value
 * @method integer             getTotalReplies()          Returns the current record's "TotalReplies" value
 * @method enum                getStatus()                Returns the current record's "Status" value
 * @method timestamp           getLastRepliedDateTime()   Returns the current record's "LastRepliedDateTime" value
 * @method Users               getForumTopicsUsers()      Returns the current record's "ForumTopicsUsers" value
 * @method Forums              getForumTopicsForums()     Returns the current record's "ForumTopicsForums" value
 * @method Doctrine_Collection getForumTopicsForumReply() Returns the current record's "ForumTopicsForumReply" collection
 * @method ForumTopics         setId()                    Sets the current record's "Id" value
 * @method ForumTopics         setUserId()                Sets the current record's "UserId" value
 * @method ForumTopics         setForumId()               Sets the current record's "ForumId" value
 * @method ForumTopics         setLastRepliedId()         Sets the current record's "LastRepliedId" value
 * @method ForumTopics         setLastRepliedBy()         Sets the current record's "LastRepliedBy" value
 * @method ForumTopics         setTotalViews()            Sets the current record's "TotalViews" value
 * @method ForumTopics         setTopic()                 Sets the current record's "Topic" value
 * @method ForumTopics         setDescription()           Sets the current record's "Description" value
 * @method ForumTopics         setTotalReplies()          Sets the current record's "TotalReplies" value
 * @method ForumTopics         setStatus()                Sets the current record's "Status" value
 * @method ForumTopics         setLastRepliedDateTime()   Sets the current record's "LastRepliedDateTime" value
 * @method ForumTopics         setForumTopicsUsers()      Sets the current record's "ForumTopicsUsers" value
 * @method ForumTopics         setForumTopicsForums()     Sets the current record's "ForumTopicsForums" value
 * @method ForumTopics         setForumTopicsForumReply() Sets the current record's "ForumTopicsForumReply" collection
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseForumTopics extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ForumTopics');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('UserId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('ForumId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('LastRepliedId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('LastRepliedBy', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('TotalViews', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('Topic', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('Description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('TotalReplies', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('Status', 'enum', 8, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Active',
              1 => 'Inactive',
              2 => 'Deleted',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('LastRepliedDateTime', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Users as ForumTopicsUsers', array(
             'local' => 'UserId',
             'foreign' => 'Id'));

        $this->hasOne('Forums as ForumTopicsForums', array(
             'local' => 'ForumId',
             'foreign' => 'Id'));

        $this->hasMany('ForumReply as ForumTopicsForumReply', array(
             'local' => 'Id',
             'foreign' => 'TopicId'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}