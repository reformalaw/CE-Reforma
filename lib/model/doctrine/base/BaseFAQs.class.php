<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('FAQs', 'doctrine');

/**
 * BaseFAQs
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property string $Question
 * @property string $Answer
 * @property enum $Globle
 * @property enum $Status
 * @property Doctrine_Collection $FAQsWebsiteXFAQs
 * 
 * @method integer             getId()               Returns the current record's "Id" value
 * @method string              getQuestion()         Returns the current record's "Question" value
 * @method string              getAnswer()           Returns the current record's "Answer" value
 * @method enum                getGloble()           Returns the current record's "Globle" value
 * @method enum                getStatus()           Returns the current record's "Status" value
 * @method Doctrine_Collection getFAQsWebsiteXFAQs() Returns the current record's "FAQsWebsiteXFAQs" collection
 * @method FAQs                setId()               Sets the current record's "Id" value
 * @method FAQs                setQuestion()         Sets the current record's "Question" value
 * @method FAQs                setAnswer()           Sets the current record's "Answer" value
 * @method FAQs                setGloble()           Sets the current record's "Globle" value
 * @method FAQs                setStatus()           Sets the current record's "Status" value
 * @method FAQs                setFAQsWebsiteXFAQs() Sets the current record's "FAQsWebsiteXFAQs" collection
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFAQs extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('FAQs');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('Question', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('Answer', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('Globle', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('Status', 'enum', 8, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Active',
              1 => 'Inactive',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('WebsiteXFAQs as FAQsWebsiteXFAQs', array(
             'local' => 'Id',
             'foreign' => 'FAQId'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}