<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Theme', 'doctrine');

/**
 * BaseTheme
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property string $Name
 * @property string $UniqueName
 * @property string $ScreenShot
 * @property enum $Status
 * @property enum $IsDefault
 * @property string $Features
 * @property string $Options
 * @property enum $ManageTopMenu
 * @property enum $ManageFooterMenu
 * @property enum $ManageBanner
 * @property enum $ManageColorAndBackground
 * @property enum $ManageSocialMedia
 * @property enum $ChangeLogo
 * @property enum $ManageFAQs
 * @property enum $TextWidgets
 * @property enum $BodyBackground
 * @property Doctrine_Collection $UsersWebsite
 * @property Doctrine_Collection $ThemeBanner
 * @property Doctrine_Collection $ThemeOptions
 * 
 * @method integer             getId()                       Returns the current record's "Id" value
 * @method string              getName()                     Returns the current record's "Name" value
 * @method string              getUniqueName()               Returns the current record's "UniqueName" value
 * @method string              getScreenShot()               Returns the current record's "ScreenShot" value
 * @method enum                getStatus()                   Returns the current record's "Status" value
 * @method enum                getIsDefault()                Returns the current record's "IsDefault" value
 * @method string              getFeatures()                 Returns the current record's "Features" value
 * @method string              getOptions()                  Returns the current record's "Options" value
 * @method enum                getManageTopMenu()            Returns the current record's "ManageTopMenu" value
 * @method enum                getManageFooterMenu()         Returns the current record's "ManageFooterMenu" value
 * @method enum                getManageBanner()             Returns the current record's "ManageBanner" value
 * @method enum                getManageColorAndBackground() Returns the current record's "ManageColorAndBackground" value
 * @method enum                getManageSocialMedia()        Returns the current record's "ManageSocialMedia" value
 * @method enum                getChangeLogo()               Returns the current record's "ChangeLogo" value
 * @method enum                getManageFAQs()               Returns the current record's "ManageFAQs" value
 * @method enum                getTextWidgets()              Returns the current record's "TextWidgets" value
 * @method enum                getBodyBackground()           Returns the current record's "BodyBackground" value
 * @method Doctrine_Collection getUsersWebsite()             Returns the current record's "UsersWebsite" collection
 * @method Doctrine_Collection getThemeBanner()              Returns the current record's "ThemeBanner" collection
 * @method Doctrine_Collection getThemeOptions()             Returns the current record's "ThemeOptions" collection
 * @method Theme               setId()                       Sets the current record's "Id" value
 * @method Theme               setName()                     Sets the current record's "Name" value
 * @method Theme               setUniqueName()               Sets the current record's "UniqueName" value
 * @method Theme               setScreenShot()               Sets the current record's "ScreenShot" value
 * @method Theme               setStatus()                   Sets the current record's "Status" value
 * @method Theme               setIsDefault()                Sets the current record's "IsDefault" value
 * @method Theme               setFeatures()                 Sets the current record's "Features" value
 * @method Theme               setOptions()                  Sets the current record's "Options" value
 * @method Theme               setManageTopMenu()            Sets the current record's "ManageTopMenu" value
 * @method Theme               setManageFooterMenu()         Sets the current record's "ManageFooterMenu" value
 * @method Theme               setManageBanner()             Sets the current record's "ManageBanner" value
 * @method Theme               setManageColorAndBackground() Sets the current record's "ManageColorAndBackground" value
 * @method Theme               setManageSocialMedia()        Sets the current record's "ManageSocialMedia" value
 * @method Theme               setChangeLogo()               Sets the current record's "ChangeLogo" value
 * @method Theme               setManageFAQs()               Sets the current record's "ManageFAQs" value
 * @method Theme               setTextWidgets()              Sets the current record's "TextWidgets" value
 * @method Theme               setBodyBackground()           Sets the current record's "BodyBackground" value
 * @method Theme               setUsersWebsite()             Sets the current record's "UsersWebsite" collection
 * @method Theme               setThemeBanner()              Sets the current record's "ThemeBanner" collection
 * @method Theme               setThemeOptions()             Sets the current record's "ThemeOptions" collection
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTheme extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('Theme');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('Name', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('UniqueName', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('ScreenShot', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Status', 'enum', 8, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Active',
              1 => 'Inactive',
              2 => 'Deleted',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('IsDefault', 'enum', 8, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'YES',
              1 => 'NO',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('Features', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('Options', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('ManageTopMenu', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('ManageFooterMenu', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('ManageBanner', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('ManageColorAndBackground', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('ManageSocialMedia', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('ChangeLogo', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('ManageFAQs', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('TextWidgets', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('BodyBackground', 'enum', 3, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Yes',
              1 => 'No',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('UsersWebsite', array(
             'local' => 'Id',
             'foreign' => 'ThemeId'));

        $this->hasMany('ThemeBanner', array(
             'local' => 'Id',
             'foreign' => 'ThemeId'));

        $this->hasMany('ThemeOptions', array(
             'local' => 'Id',
             'foreign' => 'ThemeId'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}