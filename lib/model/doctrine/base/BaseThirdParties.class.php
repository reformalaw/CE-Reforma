<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ThirdParties', 'doctrine');

/**
 * BaseThirdParties
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property string $Name
 * @property string $Address1
 * @property string $Address2
 * @property string $City
 * @property integer $CountryId
 * @property integer $CountyId
 * @property integer $StateId
 * @property string $Zip
 * @property enum $Status
 * @property Counties $ThirdPartiesCounties
 * @property States $ThirdPartiesStates
 * @property Doctrine_Collection $ThirdPartiesCases
 * @property Doctrine_Collection $ThirdPartyPaymentReceived
 * 
 * @method integer             getId()                        Returns the current record's "Id" value
 * @method string              getName()                      Returns the current record's "Name" value
 * @method string              getAddress1()                  Returns the current record's "Address1" value
 * @method string              getAddress2()                  Returns the current record's "Address2" value
 * @method string              getCity()                      Returns the current record's "City" value
 * @method integer             getCountryId()                 Returns the current record's "CountryId" value
 * @method integer             getCountyId()                  Returns the current record's "CountyId" value
 * @method integer             getStateId()                   Returns the current record's "StateId" value
 * @method string              getZip()                       Returns the current record's "Zip" value
 * @method enum                getStatus()                    Returns the current record's "Status" value
 * @method Counties            getThirdPartiesCounties()      Returns the current record's "ThirdPartiesCounties" value
 * @method States              getThirdPartiesStates()        Returns the current record's "ThirdPartiesStates" value
 * @method Doctrine_Collection getThirdPartiesCases()         Returns the current record's "ThirdPartiesCases" collection
 * @method Doctrine_Collection getThirdPartyPaymentReceived() Returns the current record's "ThirdPartyPaymentReceived" collection
 * @method ThirdParties        setId()                        Sets the current record's "Id" value
 * @method ThirdParties        setName()                      Sets the current record's "Name" value
 * @method ThirdParties        setAddress1()                  Sets the current record's "Address1" value
 * @method ThirdParties        setAddress2()                  Sets the current record's "Address2" value
 * @method ThirdParties        setCity()                      Sets the current record's "City" value
 * @method ThirdParties        setCountryId()                 Sets the current record's "CountryId" value
 * @method ThirdParties        setCountyId()                  Sets the current record's "CountyId" value
 * @method ThirdParties        setStateId()                   Sets the current record's "StateId" value
 * @method ThirdParties        setZip()                       Sets the current record's "Zip" value
 * @method ThirdParties        setStatus()                    Sets the current record's "Status" value
 * @method ThirdParties        setThirdPartiesCounties()      Sets the current record's "ThirdPartiesCounties" value
 * @method ThirdParties        setThirdPartiesStates()        Sets the current record's "ThirdPartiesStates" value
 * @method ThirdParties        setThirdPartiesCases()         Sets the current record's "ThirdPartiesCases" collection
 * @method ThirdParties        setThirdPartyPaymentReceived() Sets the current record's "ThirdPartyPaymentReceived" collection
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseThirdParties extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ThirdParties');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('Name', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Address1', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Address2', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('City', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('CountryId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('CountyId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('StateId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('Zip', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('Status', 'enum', 8, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Active',
              1 => 'Inactive',
              2 => 'Deleted',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Counties as ThirdPartiesCounties', array(
             'local' => 'CountyId',
             'foreign' => 'Id'));

        $this->hasOne('States as ThirdPartiesStates', array(
             'local' => 'StateId',
             'foreign' => 'Id'));

        $this->hasMany('Cases as ThirdPartiesCases', array(
             'local' => 'Id',
             'foreign' => 'ThirdParty'));

        $this->hasMany('ThirdPartyPaymentReceived', array(
             'local' => 'Id',
             'foreign' => 'ThirdParty'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}