<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ThirdPartyPaymentReceived', 'doctrine');

/**
 * BaseThirdPartyPaymentReceived
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property integer $ThirdParty
 * @property integer $CaseId
 * @property string $CaseNo
 * @property float $ReceivedAmount
 * @property timestamp $PaymentReceivedDate
 * @property float $DifferenceAmount
 * @property string $Description
 * @property ThirdParties $ThirdPartyPaymentReceivedThirdParties
 * @property Cases $ThirdPartyPaymentReceivedCases
 * 
 * @method integer                   getId()                                    Returns the current record's "Id" value
 * @method integer                   getThirdParty()                            Returns the current record's "ThirdParty" value
 * @method integer                   getCaseId()                                Returns the current record's "CaseId" value
 * @method string                    getCaseNo()                                Returns the current record's "CaseNo" value
 * @method float                     getReceivedAmount()                        Returns the current record's "ReceivedAmount" value
 * @method timestamp                 getPaymentReceivedDate()                   Returns the current record's "PaymentReceivedDate" value
 * @method float                     getDifferenceAmount()                      Returns the current record's "DifferenceAmount" value
 * @method string                    getDescription()                           Returns the current record's "Description" value
 * @method ThirdParties              getThirdPartyPaymentReceivedThirdParties() Returns the current record's "ThirdPartyPaymentReceivedThirdParties" value
 * @method Cases                     getThirdPartyPaymentReceivedCases()        Returns the current record's "ThirdPartyPaymentReceivedCases" value
 * @method ThirdPartyPaymentReceived setId()                                    Sets the current record's "Id" value
 * @method ThirdPartyPaymentReceived setThirdParty()                            Sets the current record's "ThirdParty" value
 * @method ThirdPartyPaymentReceived setCaseId()                                Sets the current record's "CaseId" value
 * @method ThirdPartyPaymentReceived setCaseNo()                                Sets the current record's "CaseNo" value
 * @method ThirdPartyPaymentReceived setReceivedAmount()                        Sets the current record's "ReceivedAmount" value
 * @method ThirdPartyPaymentReceived setPaymentReceivedDate()                   Sets the current record's "PaymentReceivedDate" value
 * @method ThirdPartyPaymentReceived setDifferenceAmount()                      Sets the current record's "DifferenceAmount" value
 * @method ThirdPartyPaymentReceived setDescription()                           Sets the current record's "Description" value
 * @method ThirdPartyPaymentReceived setThirdPartyPaymentReceivedThirdParties() Sets the current record's "ThirdPartyPaymentReceivedThirdParties" value
 * @method ThirdPartyPaymentReceived setThirdPartyPaymentReceivedCases()        Sets the current record's "ThirdPartyPaymentReceivedCases" value
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseThirdPartyPaymentReceived extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ThirdPartyPaymentReceived');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('ThirdParty', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('CaseId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('CaseNo', 'string', 15, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 15,
             ));
        $this->hasColumn('ReceivedAmount', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('PaymentReceivedDate', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('DifferenceAmount', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('Description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ThirdParties as ThirdPartyPaymentReceivedThirdParties', array(
             'local' => 'ThirdParty',
             'foreign' => 'Id'));

        $this->hasOne('Cases as ThirdPartyPaymentReceivedCases', array(
             'local' => 'CaseId',
             'foreign' => 'Id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}