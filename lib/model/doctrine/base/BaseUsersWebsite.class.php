<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('UsersWebsite', 'doctrine');

/**
 * BaseUsersWebsite
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property integer $UserId
 * @property integer $ThemeId
 * @property string $Websiteurl
 * @property enum $Status
 * @property Users $UsersWebsiteUsers
 * @property Doctrine_Collection $UsersWebsiteWebsiteXFAQs
 * @property Theme $UsersWebsiteTheme
 * @property Doctrine_Collection $CMSPages
 * @property Doctrine_Collection $WebsiteMenu
 * @property Doctrine_Collection $WebsitePracticeArea
 * @property Doctrine_Collection $ThemeBanner
 * @property Doctrine_Collection $Statistics
 * 
 * @method integer             getId()                       Returns the current record's "Id" value
 * @method integer             getUserId()                   Returns the current record's "UserId" value
 * @method integer             getThemeId()                  Returns the current record's "ThemeId" value
 * @method string              getWebsiteurl()               Returns the current record's "Websiteurl" value
 * @method enum                getStatus()                   Returns the current record's "Status" value
 * @method Users               getUsersWebsiteUsers()        Returns the current record's "UsersWebsiteUsers" value
 * @method Doctrine_Collection getUsersWebsiteWebsiteXFAQs() Returns the current record's "UsersWebsiteWebsiteXFAQs" collection
 * @method Theme               getUsersWebsiteTheme()        Returns the current record's "UsersWebsiteTheme" value
 * @method Doctrine_Collection getCMSPages()                 Returns the current record's "CMSPages" collection
 * @method Doctrine_Collection getWebsiteMenu()              Returns the current record's "WebsiteMenu" collection
 * @method Doctrine_Collection getWebsitePracticeArea()      Returns the current record's "WebsitePracticeArea" collection
 * @method Doctrine_Collection getThemeBanner()              Returns the current record's "ThemeBanner" collection
 * @method Doctrine_Collection getStatistics()               Returns the current record's "Statistics" collection
 * @method UsersWebsite        setId()                       Sets the current record's "Id" value
 * @method UsersWebsite        setUserId()                   Sets the current record's "UserId" value
 * @method UsersWebsite        setThemeId()                  Sets the current record's "ThemeId" value
 * @method UsersWebsite        setWebsiteurl()               Sets the current record's "Websiteurl" value
 * @method UsersWebsite        setStatus()                   Sets the current record's "Status" value
 * @method UsersWebsite        setUsersWebsiteUsers()        Sets the current record's "UsersWebsiteUsers" value
 * @method UsersWebsite        setUsersWebsiteWebsiteXFAQs() Sets the current record's "UsersWebsiteWebsiteXFAQs" collection
 * @method UsersWebsite        setUsersWebsiteTheme()        Sets the current record's "UsersWebsiteTheme" value
 * @method UsersWebsite        setCMSPages()                 Sets the current record's "CMSPages" collection
 * @method UsersWebsite        setWebsiteMenu()              Sets the current record's "WebsiteMenu" collection
 * @method UsersWebsite        setWebsitePracticeArea()      Sets the current record's "WebsitePracticeArea" collection
 * @method UsersWebsite        setThemeBanner()              Sets the current record's "ThemeBanner" collection
 * @method UsersWebsite        setStatistics()               Sets the current record's "Statistics" collection
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsersWebsite extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('UsersWebsite');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('UserId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('ThemeId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('Websiteurl', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Status', 'enum', 8, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Active',
              1 => 'Inactive',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Users as UsersWebsiteUsers', array(
             'local' => 'UserId',
             'foreign' => 'Id'));

        $this->hasMany('WebsiteXFAQs as UsersWebsiteWebsiteXFAQs', array(
             'local' => 'Id',
             'foreign' => 'WebsiteId'));

        $this->hasOne('Theme as UsersWebsiteTheme', array(
             'local' => 'ThemeId',
             'foreign' => 'Id'));

        $this->hasMany('CMSPages', array(
             'local' => 'Id',
             'foreign' => 'WebsiteId'));

        $this->hasMany('WebsiteMenu', array(
             'local' => 'Id',
             'foreign' => 'WebsiteId'));

        $this->hasMany('WebsitePracticeArea', array(
             'local' => 'Id',
             'foreign' => 'WebsiteId'));

        $this->hasMany('ThemeBanner', array(
             'local' => 'Id',
             'foreign' => 'WebsiteId'));

        $this->hasMany('Statistics', array(
             'local' => 'Id',
             'foreign' => 'WebsiteId'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}