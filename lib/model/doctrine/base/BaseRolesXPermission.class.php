<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('RolesXPermission', 'doctrine');

/**
 * BaseRolesXPermission
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property integer $RoleId
 * @property integer $PermissionId
 * @property integer $PermissionCategoryId
 * @property Doctrine_Collection $RolesXPermissionRoles
 * @property Doctrine_Collection $RolesXPermissionPermissions
 * @property Doctrine_Collection $RolesXPermissionPermissionCategory
 * 
 * @method integer             getId()                                 Returns the current record's "Id" value
 * @method integer             getRoleId()                             Returns the current record's "RoleId" value
 * @method integer             getPermissionId()                       Returns the current record's "PermissionId" value
 * @method integer             getPermissionCategoryId()               Returns the current record's "PermissionCategoryId" value
 * @method Doctrine_Collection getRolesXPermissionRoles()              Returns the current record's "RolesXPermissionRoles" collection
 * @method Doctrine_Collection getRolesXPermissionPermissions()        Returns the current record's "RolesXPermissionPermissions" collection
 * @method Doctrine_Collection getRolesXPermissionPermissionCategory() Returns the current record's "RolesXPermissionPermissionCategory" collection
 * @method RolesXPermission    setId()                                 Sets the current record's "Id" value
 * @method RolesXPermission    setRoleId()                             Sets the current record's "RoleId" value
 * @method RolesXPermission    setPermissionId()                       Sets the current record's "PermissionId" value
 * @method RolesXPermission    setPermissionCategoryId()               Sets the current record's "PermissionCategoryId" value
 * @method RolesXPermission    setRolesXPermissionRoles()              Sets the current record's "RolesXPermissionRoles" collection
 * @method RolesXPermission    setRolesXPermissionPermissions()        Sets the current record's "RolesXPermissionPermissions" collection
 * @method RolesXPermission    setRolesXPermissionPermissionCategory() Sets the current record's "RolesXPermissionPermissionCategory" collection
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRolesXPermission extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('RolesXPermission');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('RoleId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('PermissionId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('PermissionCategoryId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Roles as RolesXPermissionRoles', array(
             'local' => 'RoleId',
             'foreign' => 'Id'));

        $this->hasMany('Permissions as RolesXPermissionPermissions', array(
             'local' => 'PermissionId',
             'foreign' => 'Id'));

        $this->hasMany('PermissionCategory as RolesXPermissionPermissionCategory', array(
             'local' => 'PermissionCategoryId',
             'foreign' => 'Id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}