<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('States', 'doctrine');

/**
 * BaseStates
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property integer $CountryId
 * @property string $Name
 * @property enum $Status
 * @property Doctrine_Collection $StateUsers
 * @property Doctrine_Collection $StateUserProfile
 * @property Doctrine_Collection $StateCounties
 * @property Doctrine_Collection $ThirdParties
 * @property Doctrine_Collection $UserProfile
 * @property Doctrine_Collection $Users
 * @property Doctrine_Collection $UserPracticeAreaLocation
 * 
 * @method integer             getId()                       Returns the current record's "Id" value
 * @method integer             getCountryId()                Returns the current record's "CountryId" value
 * @method string              getName()                     Returns the current record's "Name" value
 * @method enum                getStatus()                   Returns the current record's "Status" value
 * @method Doctrine_Collection getStateUsers()               Returns the current record's "StateUsers" collection
 * @method Doctrine_Collection getStateUserProfile()         Returns the current record's "StateUserProfile" collection
 * @method Doctrine_Collection getStateCounties()            Returns the current record's "StateCounties" collection
 * @method Doctrine_Collection getThirdParties()             Returns the current record's "ThirdParties" collection
 * @method Doctrine_Collection getUserProfile()              Returns the current record's "UserProfile" collection
 * @method Doctrine_Collection getUsers()                    Returns the current record's "Users" collection
 * @method Doctrine_Collection getUserPracticeAreaLocation() Returns the current record's "UserPracticeAreaLocation" collection
 * @method States              setId()                       Sets the current record's "Id" value
 * @method States              setCountryId()                Sets the current record's "CountryId" value
 * @method States              setName()                     Sets the current record's "Name" value
 * @method States              setStatus()                   Sets the current record's "Status" value
 * @method States              setStateUsers()               Sets the current record's "StateUsers" collection
 * @method States              setStateUserProfile()         Sets the current record's "StateUserProfile" collection
 * @method States              setStateCounties()            Sets the current record's "StateCounties" collection
 * @method States              setThirdParties()             Sets the current record's "ThirdParties" collection
 * @method States              setUserProfile()              Sets the current record's "UserProfile" collection
 * @method States              setUsers()                    Sets the current record's "Users" collection
 * @method States              setUserPracticeAreaLocation() Sets the current record's "UserPracticeAreaLocation" collection
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStates extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('States');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('CountryId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('Name', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Status', 'enum', 8, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Active',
              1 => 'Inactive',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Users as StateUsers', array(
             'local' => 'Id',
             'foreign' => 'State'));

        $this->hasMany('UserProfile as StateUserProfile', array(
             'local' => 'Id',
             'foreign' => 'State'));

        $this->hasMany('Counties as StateCounties', array(
             'local' => 'Id',
             'foreign' => 'StateId'));

        $this->hasMany('ThirdParties', array(
             'local' => 'Id',
             'foreign' => 'StateId'));

        $this->hasMany('UserProfile', array(
             'local' => 'Id',
             'foreign' => 'StateId'));

        $this->hasMany('Users', array(
             'local' => 'Id',
             'foreign' => 'StateId'));

        $this->hasMany('UserPracticeAreaLocation', array(
             'local' => 'Id',
             'foreign' => 'StateId'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}