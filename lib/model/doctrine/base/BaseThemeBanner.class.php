<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ThemeBanner', 'doctrine');

/**
 * BaseThemeBanner
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property integer $ThemeId
 * @property integer $WebsiteId
 * @property string $BannerName
 * @property string $Image
 * @property string $Title1
 * @property string $Title2
 * @property string $Title3
 * @property enum $Status
 * @property Theme $ThemeBannerTheme
 * @property UsersWebsite $ThemeBannerUserWebsite
 * 
 * @method integer      getId()                     Returns the current record's "Id" value
 * @method integer      getThemeId()                Returns the current record's "ThemeId" value
 * @method integer      getWebsiteId()              Returns the current record's "WebsiteId" value
 * @method string       getBannerName()             Returns the current record's "BannerName" value
 * @method string       getImage()                  Returns the current record's "Image" value
 * @method string       getTitle1()                 Returns the current record's "Title1" value
 * @method string       getTitle2()                 Returns the current record's "Title2" value
 * @method string       getTitle3()                 Returns the current record's "Title3" value
 * @method enum         getStatus()                 Returns the current record's "Status" value
 * @method Theme        getThemeBannerTheme()       Returns the current record's "ThemeBannerTheme" value
 * @method UsersWebsite getThemeBannerUserWebsite() Returns the current record's "ThemeBannerUserWebsite" value
 * @method ThemeBanner  setId()                     Sets the current record's "Id" value
 * @method ThemeBanner  setThemeId()                Sets the current record's "ThemeId" value
 * @method ThemeBanner  setWebsiteId()              Sets the current record's "WebsiteId" value
 * @method ThemeBanner  setBannerName()             Sets the current record's "BannerName" value
 * @method ThemeBanner  setImage()                  Sets the current record's "Image" value
 * @method ThemeBanner  setTitle1()                 Sets the current record's "Title1" value
 * @method ThemeBanner  setTitle2()                 Sets the current record's "Title2" value
 * @method ThemeBanner  setTitle3()                 Sets the current record's "Title3" value
 * @method ThemeBanner  setStatus()                 Sets the current record's "Status" value
 * @method ThemeBanner  setThemeBannerTheme()       Sets the current record's "ThemeBannerTheme" value
 * @method ThemeBanner  setThemeBannerUserWebsite() Sets the current record's "ThemeBannerUserWebsite" value
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseThemeBanner extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ThemeBanner');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('ThemeId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('WebsiteId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('BannerName', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Image', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Title1', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Title2', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Title3', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('Status', 'enum', 8, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Active',
              1 => 'Inactive',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Theme as ThemeBannerTheme', array(
             'local' => 'ThemeId',
             'foreign' => 'Id'));

        $this->hasOne('UsersWebsite as ThemeBannerUserWebsite', array(
             'local' => 'WebsiteId',
             'foreign' => 'Id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}