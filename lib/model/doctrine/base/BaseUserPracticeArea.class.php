<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('UserPracticeArea', 'doctrine');

/**
 * BaseUserPracticeArea
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property integer $UserId
 * @property integer $PracticeareaId
 * @property integer $CatId
 * @property integer $SubCatId
 * @property integer $ChildId
 * @property integer $Level
 * @property Doctrine_Collection $UserPracticeAreaUsers
 * @property PracticeAreas $UserPracticeAreaPracticeAreas
 * @property PracticeAreas $UserPracticeAreaCat
 * @property PracticeAreas $UserPracticeAreaSubCat
 * @property PracticeAreas $UserPracticeAreaChild
 * @property PracticeAreas $PracticeAreas
 * 
 * @method integer             getId()                            Returns the current record's "Id" value
 * @method integer             getUserId()                        Returns the current record's "UserId" value
 * @method integer             getPracticeareaId()                Returns the current record's "PracticeareaId" value
 * @method integer             getCatId()                         Returns the current record's "CatId" value
 * @method integer             getSubCatId()                      Returns the current record's "SubCatId" value
 * @method integer             getChildId()                       Returns the current record's "ChildId" value
 * @method integer             getLevel()                         Returns the current record's "Level" value
 * @method Doctrine_Collection getUserPracticeAreaUsers()         Returns the current record's "UserPracticeAreaUsers" collection
 * @method PracticeAreas       getUserPracticeAreaPracticeAreas() Returns the current record's "UserPracticeAreaPracticeAreas" value
 * @method PracticeAreas       getUserPracticeAreaCat()           Returns the current record's "UserPracticeAreaCat" value
 * @method PracticeAreas       getUserPracticeAreaSubCat()        Returns the current record's "UserPracticeAreaSubCat" value
 * @method PracticeAreas       getUserPracticeAreaChild()         Returns the current record's "UserPracticeAreaChild" value
 * @method PracticeAreas       getPracticeAreas()                 Returns the current record's "PracticeAreas" value
 * @method UserPracticeArea    setId()                            Sets the current record's "Id" value
 * @method UserPracticeArea    setUserId()                        Sets the current record's "UserId" value
 * @method UserPracticeArea    setPracticeareaId()                Sets the current record's "PracticeareaId" value
 * @method UserPracticeArea    setCatId()                         Sets the current record's "CatId" value
 * @method UserPracticeArea    setSubCatId()                      Sets the current record's "SubCatId" value
 * @method UserPracticeArea    setChildId()                       Sets the current record's "ChildId" value
 * @method UserPracticeArea    setLevel()                         Sets the current record's "Level" value
 * @method UserPracticeArea    setUserPracticeAreaUsers()         Sets the current record's "UserPracticeAreaUsers" collection
 * @method UserPracticeArea    setUserPracticeAreaPracticeAreas() Sets the current record's "UserPracticeAreaPracticeAreas" value
 * @method UserPracticeArea    setUserPracticeAreaCat()           Sets the current record's "UserPracticeAreaCat" value
 * @method UserPracticeArea    setUserPracticeAreaSubCat()        Sets the current record's "UserPracticeAreaSubCat" value
 * @method UserPracticeArea    setUserPracticeAreaChild()         Sets the current record's "UserPracticeAreaChild" value
 * @method UserPracticeArea    setPracticeAreas()                 Sets the current record's "PracticeAreas" value
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserPracticeArea extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('UserPracticeArea');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('UserId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('PracticeareaId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('CatId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('SubCatId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('ChildId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('Level', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Users as UserPracticeAreaUsers', array(
             'local' => 'UserId',
             'foreign' => 'Id'));

        $this->hasOne('PracticeAreas as UserPracticeAreaPracticeAreas', array(
             'local' => 'PracticeareaId',
             'foreign' => 'Id'));

        $this->hasOne('PracticeAreas as UserPracticeAreaCat', array(
             'local' => 'CatId',
             'foreign' => 'Id'));

        $this->hasOne('PracticeAreas as UserPracticeAreaSubCat', array(
             'local' => 'SubCatId',
             'foreign' => 'Id'));

        $this->hasOne('PracticeAreas as UserPracticeAreaChild', array(
             'local' => 'ChildId',
             'foreign' => 'Id'));

        $this->hasOne('PracticeAreas', array(
             'local' => 'PracticeAreaId',
             'foreign' => 'Id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'CreateDateTime',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'name' => 'UpdateDateTime',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($timestampable0);
    }
}