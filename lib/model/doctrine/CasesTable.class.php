<?php

/**
 * CasesTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CasesTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object CasesTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Cases');
    }

    /**
     * Function Returns the Case Detail
     */
    public static function getCaseDetail($caseId)
    {
        $sql = Doctrine_Query::create()
        ->from('Cases c')
        ->where('c.Id = ?',$caseId);
        //clsCommon::pr($queryUser->getSqlQuery(),1);
        $result = $sql->fetchArray();
        $sql->free();
        #clsCommon::pr($result,1);;
        return $result[0];
    } // End oF Class


    /**
     *  Function to get All Case No.
     */
    public static function getAllCaseNo($userId = NULL , $stage = array())
    {
        #echo '==='.$userId.'===';
        $sql = Doctrine_Query::create()
        ->select('c.Id, c.CaseNo')
        ->from('Cases c')
        ->orderBy('c.Id ASc')
        ->where('c.CaseNo != ?','')
        ->andWhere('c.Status != ?', sfConfig::get('app_CaseStatus_Deleted'));

        if(!empty($userId))
        $sql->andWhere('c.UserId = ?',$userId);

        if(!empty($stage)) {
            $sql->andWhereIn('c.Stage',$stage);
        }

        #clsCommon::pr($sql->getSqlQuery());
        $result = $sql->fetchArray();
        $sql->free();
        #clsCommon::pr($result,1);;
        $custArr = array();

        if(!empty($result)) {
            for($i=0;$i<count($result); $i++)     {
                $custArr[$result[$i]['Id']] = $result[$i]['CaseNo'];
            }
        } // End of IF


        return $custArr;
    } // End oF Class

    /**
     * Function to get Case Details for Selected Customers whose Cases are Accepted
     *
     * @param unknown_type $userId
     * @return unknown
     */
    public static function getUserCaseInfo($userId)
    {
        $queryUser = Doctrine_Query::create()
        ->select('c.Id, c.CaseNo, c.Description , c.FirstTitle, c.LastTitle')
        ->from('Cases c')
        ->where('c.UserId = ?', $userId)
        ->andWhere('c.Stage = ?', sfConfig::get('app_CaseStage_Accepted'))
        ->andWhere('c.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->orderBy('c.CreateDateTime');

        #clsCommon::pr($queryUser->getSqlQuery());
        $result = $queryUser->fetchArray();
        $queryUser->free();
        $caseArr = array();
        if(!empty($result)) {
            for($i= 0 ; $i<count($result); $i++) {
                $caseArr[$result[$i]['Id']] = $result[$i]['CaseNo'].' - '.$result[$i]['FirstTitle'].' '.$result[$i]['LastTitle'];
            } // End of For

        } // End of If
        /*clsCommon::pr($result);
        clsCommon::pr($caseArr);
        die;*/
        return $caseArr;
    } // End of Function




    /**
     * Function to get Case Details for Selected 3rd Parties whose Cases are Paid
     *
     * @param unknown_type $3rd Party Id
     * @return unknown
     */
    public static function GetThirdPartPaidCases($partyId)
    {
        $queryUser = Doctrine_Query::create()
        ->select('c.Id, c.CaseNo, c.Description , c.FirstTitle, c.LastTitle')
        ->from('Cases c')
        ->where('c.ThirdParty = ?', $partyId)
        ->andWhere('c.Stage = ?', sfConfig::get('app_CaseStage_Paid'))
        ->andWhere('c.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->orderBy('c.CreateDateTime');

        #clsCommon::pr($queryUser->getSqlQuery());
        $result = $queryUser->fetchArray();
        $queryUser->free();
        $caseArr = array();
        if(!empty($result)) {
            for($i= 0 ; $i<count($result); $i++) {
                $caseArr[$result[$i]['Id']] = $result[$i]['CaseNo'].' - '.$result[$i]['FirstTitle'].' '.$result[$i]['LastTitle'];
            } // End of For

        } // End of If
        /*clsCommon::pr($result);
        clsCommon::pr($caseArr);
        die;*/
        return $caseArr;
    } // End of Function


    /**
     *  Function to get Cases based on passed parameters
     */
    public static function getSelectedCases($userId = NULL , $stage = array())
    {
        #echo '==='.$userId.'===';
        $sql = Doctrine_Query::create()
        ->select('c.Id, c.CaseNo, c.FirstTitle, c.LastTitle')
        ->from('Cases c')
        ->orderBy('c.Id ASc')
        ->where('c.CaseNo != ?','')
        ->andWhere('c.Status != ?', sfConfig::get('app_CaseStatus_Deleted'));

        if(!empty($userId))
        $sql->andWhere('c.UserId = ?',$userId);

        if(!empty($stage)) {
            $sql->andWhereIn('c.Stage',$stage);
        }

        #clsCommon::pr($sql->getSqlQuery());
        $result = $sql->fetchArray();
        $sql->free();
        #clsCommon::pr($result,1);;
        $custArr = array();

        if(!empty($result)) {
            for($i=0;$i<count($result); $i++)     {
                $custArr[$result[$i]['Id']] = $result[$i]['CaseNo'].' - '.$result[$i]['FirstTitle'].' '.$result[$i]['LastTitle'];
            }
        } // End of IF


        return $custArr;
    } // End oF Class



    /**
     * Function to get Case Details for Selected 3rd Parties whose Cases are Closed
     *
     * @param unknown_type $3rd Party Id
     * @return unknown
     */
    public static function GetThirdPartyCloseCases($partyId)
    {
        $queryUser = Doctrine_Query::create()
        ->select('c.Id, c.CaseNo, c.Description , c.FirstTitle, c.LastTitle')
        ->from('Cases c')
        ->where('c.ThirdParty = ?', $partyId)
        ->andWhere('c.Stage = ?', sfConfig::get('app_CaseStage_Close'))
        ->andWhere('c.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->orderBy('c.CreateDateTime');

        #clsCommon::pr($queryUser->getSqlQuery());
        $result = $queryUser->fetchArray();
        $queryUser->free();
        $caseArr = array();
        if(!empty($result)) {
            for($i= 0 ; $i<count($result); $i++) {
                $caseArr[$result[$i]['Id']] = $result[$i]['CaseNo'].' - '.$result[$i]['FirstTitle'].' '.$result[$i]['LastTitle'];
            } // End of For

        } // End of If
        /*clsCommon::pr($result);
        clsCommon::pr($caseArr);
        die;*/
        return $caseArr;
    } // End of Function

    /**
     * Function to get Case Details for Selected 3rd Parties whose Cases are Closed
     *
     * @param unknown_type $3rd Party Id
     * @return unknown
     */
    public static function GetPaidCases()
    {
        $queryUser = Doctrine_Query::create()
        ->select('c.Id, c.CaseNo, c.Description , c.FirstTitle, c.LastTitle')
        ->from('Cases c')
        ->where('c.Stage = ?', sfConfig::get('app_CaseStage_Paid'))
        ->andWhere('c.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->orderBy('c.CreateDateTime');

        #clsCommon::pr($queryUser->getSqlQuery());
        $result = $queryUser->fetchArray();
        $queryUser->free();
        $caseArr = array();
        if(!empty($result)) {
            for($i= 0 ; $i<count($result); $i++) {
                $caseArr[$result[$i]['Id']] = $result[$i]['CaseNo'].' - '.$result[$i]['FirstTitle'].' '.$result[$i]['LastTitle'];
            } // End of For

        } // End of If
        /*clsCommon::pr($result);
        clsCommon::pr($caseArr);
        die;*/
        return $caseArr;
    } // End of Function


    /**
     * Function to get Users Paid Cases 
     *
     * @param unknown_type User Id
     * @return unknown
     */
    public static function GetCustomerPaidCases($userId)
    {
        $queryUser = Doctrine_Query::create()
        ->select('c.Id, c.CaseNo, c.FirstTitle, c.LastTitle')
        ->from('Cases c')
        ->where('c.Stage = ?', sfConfig::get('app_CaseStage_Paid'))
        ->andWhere('c.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->andWhere('c.UserId = ?', $userId)
        ->orderBy('c.CreateDateTime');

        #clsCommon::pr($queryUser->getSqlQuery());
        $result = $queryUser->fetchArray();
        $queryUser->free();
        $caseArr = array();
        if(!empty($result)) {
            for($i= 0 ; $i<count($result); $i++) {
                $caseArr[$result[$i]['Id']] = $result[$i]['CaseNo'].' - '.$result[$i]['FirstTitle'].' '.$result[$i]['LastTitle'];
            } // End of For

        } // End of If
        /*clsCommon::pr($result);
        clsCommon::pr($caseArr);
        die;*/
        return $caseArr;
    } // End of Function


    /**
     * Function to get Users Accepted Cases Count
     *
     * @param unknown_type User Id
     * @return unknown
     */
    public static function GetCustomerAcceptedCaseCount($userId)
    {
        $queryUser = Doctrine_Query::create()
        ->select('c.Id')
        ->from('Cases c')
        ->where('c.Stage != ?', sfConfig::get('app_CaseStage_Submitted'))
        ->andWhereIn('c.Status',array(sfConfig::get('app_CaseStatus_Active'), sfConfig::get('app_CaseStatus_Inactive')))
        ->andWhere('c.UserId = ?', $userId);

        $result = $queryUser->Count();
        $queryUser->free();
        return $result;
    } // End of Function

    /**
     * Function to get Users Paid Cases Count
     *
     * @param unknown_type User Id
     * @return unknown
     */
    public static function GetCustomerPaidCaseCount($userId)
    {
        $queryUser = Doctrine_Query::create()
        ->select('c.Id')
        ->from('Cases c')
        #->whereIn('c.Stage', array(sfConfig::get('app_CaseStage_Paid'), sfConfig::get('app_CaseStage_Close')))
        ->whereIn('c.Stage', array(sfConfig::get('app_CaseStage_Close')))
        ->andWhere('c.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->andWhere('c.UserId = ?', $userId);
        $result = $queryUser->Count();
        $queryUser->free();
        return $result;
    } // End of Function

    /**
     * Function to get Users Pending Cases Count
     *
     * @param unknown_type User Id
     * @return unknown
     */
    public static function GetCustomerPendingCaseCount($userId)
    {
        $queryUser = Doctrine_Query::create()
        ->select('c.Id')
        ->from('Cases c')
        ->whereIn('c.Stage', array(sfConfig::get('app_CaseStage_Accepted')))
        ->andWhere('c.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->andWhere('c.UserId = ?', $userId);
        $result = $queryUser->Count();
        $queryUser->free();
        return $result;
    } // End of Function


    /**
     * Function to get Users Actual, Pending and Underpay Amount Total
     *
     * @param unknown_type User Id
     * @return unknown
     */

    public static function GetCustomerCaseAllAmount($userId)
    {
        $queryUser = Doctrine_Query::create()
        ->select(' IFNULL(SUM(c.ActualAmount),0) as actualamount, IFNULL(SUM(c.PayableAmount),0) as payableamount, IFNULL(SUM(c.UnderPayAdjustment),0) as underpayamount,  IFNULL(SUM(c.PaidAmount),0) as paidamount, IFNULL(SUM(c.RemainToPay),0) as remainamount, IFNULL(SUM(c.ReceivedAmount),0) as receivedamount')
        ->from('Cases c')
        ->Where('c.UserId = ?', $userId)
        ->andWhereIn('c.Status',array(sfConfig::get('app_CaseStatus_Active') , sfConfig::get('app_CaseStatus_Inactive')) )
        ->andWhere('c.Stage != ?',sfConfig::get('app_CaseStage_Submitted'));
        $result = $queryUser->fetchArray();
        #clsCommon::pr($result);
        $queryUser->free();
        return $result[0];
    } // End of Function

    /**
     *  Function to get All Case No.
     */
    public static function getUserCaseNo($userId = NULL , $stage = array())
    {
        #echo '==='.$userId.'===';
        $sql = Doctrine_Query::create()
        ->select('c.Id, c.CaseNo')
        ->from('Cases c')
        ->orderBy('c.Id ASc')
        ->andWhere('c.Status = ?', sfConfig::get('app_CaseStatus_Active'))
        ->andWhere('c.UserId = ?',sfContext::getInstance()->getUser()->getAttribute('admin_user_id'));

        #clsCommon::pr($sql->getSqlQuery());
        $result = $sql->fetchArray();
        $sql->free();
        #clsCommon::pr($result,1);;
        $custArr = array();

        if(!empty($result)) {
            for($i=0;$i<count($result); $i++)     {
                $custArr[$result[$i]['Id']] = $result[$i]['CaseNo'];
            }
        } // End of IF


        return $custArr;
    } // End oF Class


    /**
     * Fuction To calcutalte Cusomer UnderPay Amount
     * 
     *
     * @param unknown_type $userId
     */
    public static function getCustomerUnderPayAmt($userId) {

        $sql = Doctrine_Query::create()
        ->select('IFNULL(SUM(c.ActualAmount),0) as actualamount, IFNULL(SUM(c.ReceivedAmount),0) as receivedamount , IFNULL(SUM(c.RemainToPay),0) as remaintopay')
        ->from('Cases c')
        ->where('c.UserId = ? ', $userId )
        ->andWhereIn('c.Status', array(sfConfig::get('app_CaseStatus_Active'),sfConfig::get('app_CaseStatus_Inactive') ))
        ->andWhere('c.Stage = ?', sfConfig::get('app_CaseStage_Close'))
        ->andWhere('c.ActualAmount - IFNULL(c.ReceivedAmount,0) >= ?', 0);


        #echo $sql->getSqlQuery();

        $result = $sql->fetchArray();
        #clsCommon::pr($result);
        $actAmt = $result[0]['actualamount'];
        #echo '<br>';
        $recdAmt = $result[0]['receivedamount'];
        #echo '<br>';
        #$remainPayAmt  = $result[0]['remaintopay'];

        $underPayAmt = self::getSumOfUnderPayAmt($userId);
        #$remainPayAmt = self::getRemainToPay($userId);

        #echo '<br>';
        #$underPayAdjustment = ( $actAmt  - $recdAmt -  $remainPayAmt)  - $underPayAmt ;
        $underPayAdjustment = ( $actAmt  - $recdAmt )  - $underPayAmt ;
        $sql->free();
        #clsCommon::pr($result);
        return $underPayAdjustment;

    } // End of Function

    /**
     * Fuction To get Customer Sum of UnderPay Amount
     * 
     *
     * @param unknown_type $userId
     */
    public static function getSumOfUnderPayAmt($userId) {

        $sql = Doctrine_Query::create()
        ->select('c.Id, IFNULL(SUM(c.UnderPayAdjustment),0) as underpayadjustment')
        ->from('Cases c')
        ->where('c.UserId = ? ', $userId )
        ->andWhereIn('c.Status', array(sfConfig::get('app_CaseStatus_Active'),sfConfig::get('app_CaseStatus_Inactive') ));
        $result = $sql->fetchArray();
        $sql->free();
        return $result[0]['underpayadjustment'];

    } // End of Function


    /**
     *  Function to get Only Active Cases
     */
    public static function getActiveCases($userId = NULL , $stage = array())
    {
        $sql = Doctrine_Query::create()
        ->select('c.Id, c.CaseNo, c.FirstTitle, c.LastTitle')
        ->from('Cases c')
        ->orderBy('c.Id ASc')
        ->where('c.CaseNo != ?','')
        ->andWhere('c.Status != ?', sfConfig::get('app_CaseStatus_Deleted'));

        if(!empty($userId))
        $sql->andWhere('c.UserId = ?',$userId);

        if(!empty($stage)) {
            $sql->andWhereIn('c.Stage',$stage);
        }
        $result = $sql->fetchArray();
        $sql->free();
        $custArr = array();

        if(!empty($result)) {
            for($i=0;$i<count($result); $i++)     {
                $custArr[$result[$i]['Id']] = $result[$i]['CaseNo'].' - '.$result[$i]['FirstTitle'].' '.$result[$i]['LastTitle'];
            }
        } // End of IF
        return $custArr;
    } // End oF Class

    /**
     * Fuction to use in dashboard to get case info of user
     * 
     *
     * @param integer $snUserId
     */
    public static function getCaseInformation($snUserId, $limit = 5)
    {
        $oCaseInfo = Doctrine_Query::create()
        ->select('c.*')
        ->from('Cases c')
        ->where('c.UserId = ? ', $snUserId )
        ->andWhereIn('c.Status',array(sfConfig::get('app_CaseStatus_Active'),sfConfig::get('app_CaseStatus_Inactive')) )
        ->orderBy('c.Id Desc')
        ->limit($limit)
        ->execute();

        return $oCaseInfo;
    }

    /**
     * Fuction To get Customer Sum of UnderPay Amount
     * 
     *
     * @param unknown_type $userId
     */
    public static function getRemainToPay($userId) {

        $sql = Doctrine_Query::create()
        ->select('IFNULL(SUM(c.RemainToPay),0) as remaintopay')
        ->from('Cases c')
        ->where('c.UserId = ? ', $userId )
        ->andWhere('c.Status = ?', sfConfig::get('app_CaseStatus_Active'))
        ->andWhere('c.Stage = ?', sfConfig::get('app_CaseStage_Close'));

        $result = $sql->fetchArray();
        $sql->free();
        return $result[0]['remaintopay'];



    } // End of Function

    public  static  function GetCaseSearchStatistics($searchArr){

        /*$queryUser = Doctrine_Query::create()
        ->select('c.Id')
        ->from('Cases c')
        ->where('c.Stage != ?', sfConfig::get('app_CaseStage_Submitted'))
        ->andWhere('c.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->andWhere('c.UserId = ?', $userId);

        $result = $queryUser->Count();
        $queryUser->free();
        return $result;*/


        $queryUser = Doctrine_Query::create()
        ->select(' IFNULL(SUM(c.ActualAmount),0) as actualamount, IFNULL(SUM(c.PayableAmount),0) as payableamount, IFNULL(SUM(c.UnderPayAdjustment),0) as underpayamount,  IFNULL(SUM(c.PaidAmount),0) as paidamount, IFNULL(SUM(c.RemainToPay),0) as remainamount, IFNULL(SUM(c.ReceivedAmount),0) as receivedamount')
        ->from('Cases ca')
        ->Where('ca.UserId = ?', $userId)
        ->Where('ca.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->andWhere('ca.Stage != ?',sfConfig::get('app_CaseStage_Submitted'));

        if(!empty($searchArr['CaseNo'])) {
            $temp = explode(" ",$searchArr['CaseNo']);
            $queryUser->andWhere('ca.CaseNo LIKE ? ', '%'.$temp[0].'%' );
        }

        if(!empty($searchArr['StartAmount'] ) && !empty($searchArr['EndAmount'] )) {
            $queryUser->andWhere('ca.ActualAmount BETWEEN ? AND ? ', array(trim($searchArr['StartAmount']) , trim($searchArr['EndAmount']))  );
        }

        if(!empty($searchArr['Stage'])) {
            $queryUser->andWhere('ca.Stage = ? ', $searchArr['Stage'] );
        }

        if(!empty($searchArr['FromDate']) && !empty($searchArr['ToDate'])) {
            $fromDT = $searchArr['FromDate'];
            $toDT = $searchArr['ToDate'];
            $queryUser->andWhere('DATE_FORMAT(ca.AgreementDate, "%m/%d/%Y") BETWEEN ? AND ? ', array($fromDT , $toDT)  );
            //DATE_FORMAT(date,format)
        }


        $result = $queryUser->fetchArray();
        #clsCommon::pr($result);
        $queryUser->free();
        return $result[0];



    } // End of function

    /**
     * Function to get Users Total Difference Amount 
     *
     * @param unknown_type User Id
     * @return unknown
     */

    public static function GetCaseDifferenceAmount($userId)
    {
        $queryUser = Doctrine_Query::create()
        ->select(' IFNULL(SUM(c.DifferenceAmount),0) as diffamount ')
        ->from('Cases c')
        ->Where('c.UserId = ?', $userId)
        ->andWhere('c.Status = ?',sfConfig::get('app_CaseStatus_Active'))
        ->andWhere('c.Stage = ?',sfConfig::get('app_CaseStage_Close'));
        $result = $queryUser->fetchArray();

        #clsCommon::pr($result);
        $queryUser->free();
        return $result[0];
    } // End of Function


}