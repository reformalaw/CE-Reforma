<?php

/**
 * Users
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    counceledge
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Users extends BaseUsers
{

    public function __toString(){
        return $this->getFirstName().' '.$this->getLastName();
    }

    public function getName(){
        return $this->getFirstName().' '.$this->getLastName();
    }

    public function setPassword($password){
        if($password=="")
        return false;

        $objPassEncDec = new encryptDecrypt(sfConfig::get('app_pwdEncDecKey'));
        $Pwd = $objPassEncDec->crypt($password);
        return $this->_set('Password',$Pwd);
    }

    /* update the status of the Users */
    public function changeStatus($snId , $ssStatus)
    {
        if(!is_numeric($snId) || !is_string($ssStatus))
        return false;

        $ssQuery =Doctrine_Query::create()
        ->update('Users')
        ->set('status', '?', $ssStatus)
        ->where('id = ?', $snId)
        ->execute();
    }

    /**
     * this function is use for change status of subscriptions
     *
     * @param Integer $snId
     * @param String  $ssTableField
     * @param String  $ssStatus
     * @return        boolean
     */
    public function changeSubscriptionStatus($snId, $ssTableField, $ssStatus)
    {
        if(!is_numeric($snId) || !is_string($ssTableField) || !is_string($ssStatus))
        return false;

        $ssQuery =Doctrine_Query::create()
        ->update('Users')
        ->set($ssTableField, '?', $ssStatus)
        ->where('id = ?', $snId)
        ->execute();

        return true;
    }

    /**
     * this function is use for change email 
     *
     * @param Integer $id
     * @param String  $email
     * @return        boolean
     */
    public function changeEmail($id,$email)
    {
        if(!is_numeric($id) || !is_string($email))
        return false;

        $ssQuery =Doctrine_Query::create()
        ->update('Users')
        ->set('Email', '?', $email)
        ->where('id = ?', $id)
        ->execute();

        return true;
    }

    public static function checkAdminLogin($email, $password){

        $result = Doctrine_Core::getTable('Users')->getUserDetailsByEmail($email);
        //echo "<pre>"; print_r($result->toArray()); exit;
        // Check user exist
        if($result)
        {
            $objPassEncDec = new encryptDecrypt(sfConfig::get('app_pwdEncDecKey'));
            $dbPassword = $objPassEncDec->decrypt($result['Password']);

            // Check if password is valid
            if($dbPassword == $password)
            {
                // Check if status is active
                if($result['Status'] == sfConfig::get('app_UserStatus_Active') && ($result['UserType'] == sfConfig::get('app_UserType_Admin') ||
                $result['UserType'] == sfConfig::get('app_UserType_Staff') ||
                $result['UserType'] == sfConfig::get('app_UserType_Customer') ))
                {
                    // Set session for user
                    sfContext::getInstance()->getUser()->setAuthenticated(true);
                    sfContext::getInstance()->getUser()->setAttribute('admin_user_id', $result['Id']);
                    sfContext::getInstance()->getUser()->setAttribute('admin_email', $result['Email']);
                    sfContext::getInstance()->getUser()->setAttribute('admin_firstname', $result['FirstName']);
                    sfContext::getInstance()->getUser()->setAttribute('admin_lastname', $result['LastName']);
                    sfContext::getInstance()->getUser()->setAttribute('user_type', $result['UserType']);

                    # HERE WE ARE GETTING THE STAFF PEMISSION FOR LOGIN USERS AND STORE THAT ARRAY IN SESSION.
                    if ($result['UserType'] != sfConfig::get('app_UserType_Admin')){
                        $arrPermission = UserRolesTable::getPermissionListUsingRole($result['Id']);
                        // Set session for user
                        sfContext::getInstance()->getUser()->setAttribute('staff_permission', $arrPermission);
                    }

                    if ($result['UserType'] == sfConfig::get('app_UserType_Admin') ){
                        sfContext::getInstance()->getUser()->addCredential('admin');
                    }elseif($result['UserType'] == sfConfig::get('app_UserType_Staff')){
                        sfContext::getInstance()->getUser()->addCredential('staff');
                    }
                    elseif($result['UserType'] ==  sfConfig::get('app_UserType_Customer') ){
                        sfContext::getInstance()->getUser()->addCredential('customer');

                        /* create session for newtworkProfileSubscription is yes or no */
                        if($result["NetworkProfileSubscription"] == "Yes")
                        sfContext::getInstance()->getUser()->setAttribute('NetworkProfileSubscription',"Yes");
                        else
                        sfContext::getInstance()->getUser()->setAttribute('NetworkProfileSubscription',"No");

                        /* create session for billingSucscription is yes or no */
                        if($result['BillingSubscription'] == "Yes")
                        sfContext::getInstance()->getUser()->setAttribute('billingSucscription',"Yes");
                        else
                        sfContext::getInstance()->getUser()->setAttribute('billingSucscription',"No");

                        /* create session for WebsiteSubscriotion is yes or no */
                        if($result["WebsiteSubscriotion"] == "Yes")
                        sfContext::getInstance()->getUser()->setAttribute('WebsiteSubscriotion',"Yes");
                        else
                        sfContext::getInstance()->getUser()->setAttribute('WebsiteSubscriotion',"No");

                        /* this if is for personal website take into session */
                        if($result['WebsiteSubscriotion'] == "Yes")
                        {
                            $oUsersWebsite = new UsersWebsite();
                            $userData = $oUsersWebsite->getUsersWebsiteId($result['Id']);
                            sfContext::getInstance()->getUser()->setAttribute('personalWebsiteId',$userData[0]["Id"]);
                            sfContext::getInstance()->getUser()->setAttribute('websiteUrl',$userData[0]["Websiteurl"]);
                        }

                    }
                }
            }
        }
    }

    public static function setUserActivationCode($userId, $activationCode){

        //COMMENT : UPDATE USER ACTIVATION CODE
        Doctrine_Query::create()->update('Users')
        ->set('ActivationCode',"'".$activationCode."'")
        ->where('Id = ? ',$userId)
        ->execute();
        return true;
    }

    /**
     * set the IsFeatured yes no
     *
     * @param integer $userId
     * @param string  $value
     * @return boolean 
     */
    public function setUserIsFeatured($userId, $value){

        Doctrine_Query::create()->update('Users')
        ->set('IsFeatured','?', $value)
        ->where('Id = ? ', $userId)
        ->execute();
        return true;
    }
    
    /**
     * set the NoOfRating and AvgRating
     *
     * @param integer $noOfRating
     * @param float  $avgRating
     * @param integer $userId
     * @return boolean 
     */
    public function setTotalAndAvgRating($noOfRating, $avgRating, $userId)
    {
		$ssQuery =Doctrine_Query::create()
        ->update('Users')
        ->set('NoOfRating', '?', $noOfRating)
        ->set('AvgRating', '?', $avgRating)
        ->where('id = ?', $userId)
        ->execute();

        return true;
    }
    
    /**
     * set the Priority Listing yes no
     *
     * @param integer $userId
     * @param string  $value
     * @return boolean 
     */
    public function setUserPriorityListing($userId, $value){

        Doctrine_Query::create()->update('Users')
        ->set('PriorityListing','?', $value)
        ->where('Id = ? ', $userId)
        ->execute();
        return true;
    }
    
    /**
     * set user profile image
     *
     * @param integer $userId
     * @param string  $value
     * @return boolean 
     */
    public function setUserProfileImage($userId)
    {
		$ssQuery =Doctrine_Query::create()
        ->update('Users')
        ->set('ProfilePic', '?', "")
        ->where('id = ?', $userId)
        ->execute();

        return true;
    }
}